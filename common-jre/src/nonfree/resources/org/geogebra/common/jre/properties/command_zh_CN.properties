# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA=方差分析
ANOVA.Syntax=[ <数值列表1>, <数值列表2>, ... ]
AffineRatio=仿射比λ
AffineRatio.Syntax=[ <点1>, <点2>, <点3> ]
Angle=角度
Angle.Syntax=[ <几何对象 圆锥曲线|向量|点|数值|多边形> ]\n[ <向量1>, <向量2> ]\n[ <直线1>, <直线2> ]\n[ <点>, <顶点>, <点> ]\n[ <点>, <顶点>, <度|弧度> ]
Angle.Syntax3D=[ <几何对象 圆锥曲线|向量|点|数值|多边形> ]\n[ <向量1>, <向量2> ]\n[ <直线1>, <直线2> ]\n[ <直线>, <平面> ]\n[ <平面1>, <平面2> ]\n[ <点>, <顶点>, <点> ]\n[ <点>, <顶点>, <度|弧度> ]\n[ <点1>, <点2>, <点3>, <方向> ]
AngularBisector=角平分线
AngularBisector.Syntax=[ <直线1>, <直线2> ]\n[ <点1>, <顶点2>, <点3> ]
Append=追加
Append.Syntax=[ <列表>, <对象> ]\n[ <对象>, <列表> ]
ApplyMatrix=应用矩阵
ApplyMatrix.Syntax=[ <矩阵>, <对象> ]
Arc=弧线
Arc.Syntax=[ <圆>, <点1>, <点2> ]\n[ <椭圆>, <点1>, <点2> ]\n[ <圆>, <参数值1>, <参数值2> ]\n[ <椭圆>, <参数值1>, <参数值2> ]
AreCollinear=是否共线
AreCollinear.Syntax=[ <点1>, <点2>, <点3> ]
AreConcurrent=是否共点
AreConcurrent.Syntax=[ <直线1>, <直线2>, <直线3> ]
AreConcyclic=是否共圆
AreConcyclic.Syntax=[ <点1>, <点2>, <点3>, <点4> ]
AreCongruent=是否全等
AreCongruent.Syntax=[ <几何对象1>, <几何对象2> ]
AreEqual=是否相等
AreEqual.Syntax=[ <几何对象1>, <几何对象2> ]
AreParallel=是否平行
AreParallel.Syntax=[ <直线1>, <直线2> ]
ArePerpendicular=是否垂直
ArePerpendicular.Syntax=[ <直线1>, <直线2> ]
Area=面积
Area.Syntax=[ <圆或椭圆> ]\n[ <多边形> ]\n[ <点1>, ..., <点n> ]
Assume=假设
Assume.SyntaxCAS=[ <条件>, <表达式> ]
Asymptote=渐近线
Asymptote.Syntax=[ <双曲线> ]\n[ <函数> ]\n[ <隐式曲线> ]
AttachCopyToView=附加副本
AttachCopyToView.Syntax=[ <对象>, <视图值 0-创建副本|1-创建从属副本|2-创建从属副本> ]\n[ <对象>, <视图值 0-创建副本|1-创建从属副本|2-创建从属副本>, <点1>, <点2>, <屏幕点1>, <屏幕点2> ]
Axes=轴线
Axes.Syntax=[ <圆锥曲线> ]
Axes.Syntax3D=[ <圆锥曲线> ]\n[ <二次曲面> ]
AxisStepX=x轴步长
AxisStepY=y轴步长
BarChart=条形图
BarChart.Syntax=[ <数据列表>, <频数列表> ]\n[ <原始数据列表>, <条形宽度>, <竖直缩放因子(可选)> ]\n[ <数据列表>, <频数列表>, <条形宽度> ]\n[ <起始值>, <终止值>, <高度列表> ]\n[ <起始值>, <终止值>, <表达式>, <变量>, <从数值1>, <到数值2> ]\n[ <起始值>, <终止值>, <表达式>, <变量>, <从数值1>, <到数值2>, <步长> ]
BarCode=条形码
BarCode.Syntax=[ ]\n[ <图片> ]\n[ <文本或数值>, "<格式 (可选)>", "<错误校正 (可选)>", <宽度(可选)>, <高度 (可选)> ]
Barycenter=重心
Barycenter.Syntax=[ <点列>, <权重列表> ]
Bernoulli=伯努利分布
Bernoulli.Syntax=[ <概率>, <是否累积? true|false> ]
Binomial=二项式系数
Binomial.Syntax=[ <数值 n>, <数值 r> ]
BinomialDist=二项分布
BinomialDist.Syntax=[ <试验次数>, <成功概率> ]\n[ <试验次数>, <成功概率>, <是否累积? true|false> ]\n[ <试验次数>, <成功概率>, <变量值>, <是否累积? true|false> ]
BinomialDist.SyntaxCAS=[ <试验次数>, <成功概率>, <变量值>, <是否累积? true|false> ]
Bottom=下底
Bottom.Syntax=[ <二次曲面> ]
BoxPlot=箱线图
BoxPlot.Syntax=[ <y轴方向偏移量>, <y轴方向范围>, <原始数据列表> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <原始数据列表>, <是否离群值? true|false> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <数据列表>, <频数列表>, <是否离群值? true|false> ]\n[ <y轴方向偏移量>, <y轴方向范围>, <起始值即最小值>, <Q1>, <中位数>, <Q3>, <终止值即最大值> ]
Button=按钮
Button.Syntax=[ ]\n[ "<标题>" ]
CFactor=复数域因式分解
CFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
CIFactor=复无理数域因式分解
CIFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
CSolutions=复数解集
CSolutions.SyntaxCAS=[ <方程> ]\n[ <方程>, <变量> ]\n[ <方程列表>, <变量列表> ]
CSolve=复数解
CSolve.SyntaxCAS=[ <方程> ]\n[ <方程>, <变量> ]\n[ <方程列表>, <变量列表> ]
Cauchy=柯西分布
Cauchy.Syntax=[ <中位数>, <尺度参数λ>, <变量值> ]\n[ <中位数>, <尺度参数λ>, <变量值>, <是否累积? true|false> ]\n[ <中位数>, <尺度参数λ>, x, <是否累积? true|false> ]
Cauchy.SyntaxCAS=[ <中位数>, <尺度参数λ>, <变量值> ]
Cell=单元格
Cell.Syntax=[ <列序>, <行序> ]
CellRange=单元格区域数值列表
CellRange.Syntax=[ <起始单元格>, <终止单元格> ]
Center=中心
Center.Syntax=[ <圆锥曲线> ]
Center.Syntax3D=[ <圆锥曲线> ]\n[ <二次曲面> ]
CenterView=中心定位
CenterView.Syntax=[ <视图中心坐标(x, y)|视图中心点> ]
Centroid=形心
Centroid.Syntax=[ <多边形> ]
Checkbox=复选框
Checkbox.Syntax=[ ]\n[ "<标题>" ]\n[ <列表> ]\n[ "<标题>", <列表> ]
ChiSquared=卡方分布
ChiSquared.Syntax=[ <自由度>, <变量值> ]\n[ <自由度>, <变量值>, <是否累积? true|false> ]\n[ <自由度>, x, <是否累积? true|false> ]
ChiSquared.SyntaxCAS=[ <自由度>, <变量值> ]
ChiSquaredTest=卡方检验
ChiSquaredTest.Syntax=[ <矩阵> ]\n[ <列表1>, <列表2> ]\n[ <矩阵1>, <矩阵2> ]
Circle=圆周
Circle.Syntax=[ <圆心>, <半径长度> ]\n[ <圆心>, <半径> ]\n[ <圆心>, <圆上一点> ]\n[ <点1>, <点2>, <点3> ]
Circle.Syntax3D=[ <圆心>, <半径长度> ]\n[ <圆心>, <半径> ]\n[ <圆心>, <圆上一点> ]\n[ <轴线>, <圆上一点> ]\n[ <点1>, <点2>, <点3> ]\n[ <圆心>, <半径>, <轴向量> ]\n[ <圆心>, <圆上一点>, <轴向量> ]
CircleArc=圆弧
CircleArc.Syntax=[ <圆心>, <点1>, <点2> ]
CircleSector=圆扇形
CircleSector.Syntax=[ <圆心>, <点1>, <点2> ]
CircumcircleArc=外接圆弧
CircumcircleArc.Syntax=[ <点1>, <点2>, <点3> ]
CircumcircleSector=外接圆扇形
CircumcircleSector.Syntax=[ <点1>, <点2>, <点3> ]
Circumference=周界长
Circumference.Syntax=[ <圆锥曲线> ]
Classes=组限
Classes.Syntax=[ <数据列表>, <组的数量> ]\n[ <数据列表>, <起点>, <组的宽度> ]
ClosestPoint=最近点
ClosestPoint.Syntax=[ <路径>, <点> ]\n[ <直线1>, <直线2> ]
ClosestPointRegion=区域内最近点
ClosestPointRegion.Syntax=[ <区域>, <点> ]
Coefficients=系数列表
Coefficients.Syntax=[ <多项式> ]\n[ <圆锥曲线> ]
Coefficients.SyntaxCAS=[ <多项式> ]\n[ <多项式>, <变量> ]
Column=列序
Column.Syntax=[ <表格区单元格> ]
ColumnName=列名称
ColumnName.Syntax=[ <表格区单元格> ]
Command=指令
CommonDenominator=公分母
CommonDenominator.Syntax=[ <分式1>, <分式2> ]
CompetitionRank=竞争排名
CompetitionRank.Syntax=[ <列表> ]
CompleteSquare=顶点式
CompleteSquare.Syntax=[ <二次函数> ]
ComplexRoot=复数根
ComplexRoot.Syntax=[ <多项式> ]
Cone=圆锥
Cone.Syntax=[ <圆锥曲线底面>, <高度> ]\n[ <底面圆心>, <顶点>, <底面半径> ]\n[ <顶点>, <向量>, <半顶角大小 度|弧度> ]
ConeInfinite=无限长圆锥
ConeInfinite.Syntax=[ <顶点>, <轴向量>, <半顶角大小 度|弧度> ]\n[ <顶点>, <轴线上的一点>, <半顶角大小 度|弧度> ]\n[ <顶点>, <轴线>, <半顶角大小 度|弧度> ]
Conic=圆锥曲线
Conic.Syntax=[ <点1>, <点2>, <点3>, <点4>, <点5> ]\n[ <参数列表  即{x方系数, y方系数, 常数项, xy系数, x系数, y系数}> ]\n[ <x方系数>, <y方系数>, <常数项>, <xy系数>, <x系数>, <y系数> ]
ConstructionStep=作图步序
ConstructionStep.Syntax=[ ]\n[ <对象> ]
ContingencyTable=列联表
ContingencyTable.Syntax=[ <文本列表1>, <文本列表2> ]\n[ <文本列表1>, <文本列表2>, <选项 "|"-显示列百分比|"_"-显示行百分比|"+"-显示总百分比|"e"-显示预期计数|"k"-显示卡方贡献|"="-显示卡方检验结果> ]\n[ <行数值列表>, <列数值列表>, <频数表> ]\n[ <行数值列表>, <列数值列表>, <频数表>, <选项 "|"-显示列百分比|"_"-显示行百分比|"+"-显示总百分比|"e"-显示预期计数|"k"-显示卡方贡献|"="-显示卡方检验结果> ]
ContinuedFraction=连分式
ContinuedFraction.Syntax=[ <数值> ]\n[ <数值>, <层级> ]\n[ <数值>, <层级>, <速记? true|false> ]
ConvexHull=凸包
ConvexHull.Syntax=[ <点列> ]
CopyFreeObject=复制自由对象
CopyFreeObject.Syntax=[ <对象> ]
Corner=角点
Corner.Syntax=[ <角点数值 1-左下角|2-右下角|3-右上角|4-左上角|5-绘图区解析度像素|6-GeoGebra视窗的宽度与高度> ]\n[ <图片>, <角点数值 1~4> ]\n[ "<文本>", <角点数值 1~4> ]\n[ <绘图区编号数字>, <角点数值 1~6> ]
CountIf=条件计数
CountIf.Syntax=[ <条件>, <列表> ]\n[ <条件>, <变量>, <列表> ]
Covariance=协方差
Covariance.Syntax=[ <点列> ]\n[ <数值列表1>, <数值列表2> ]
Cross=叉积
Cross.Syntax=[ <向量1>, <向量2> ]
CrossRatio=交比
CrossRatio.Syntax=[ <点1>, <点2>, <点3>, <点4> ]
Cube=正六面体
Cube.Syntax=[ <正方形> ]\n[ <点1>, <点2>, <点3> ]\n[ <点1>, <点2>, <垂直于线段"点1点2"的向量|线段|射线|直线; 或者平行于线段"点1点2"的多边形|平面> ]
Cubic=三次曲线
Cubic.Syntax=[ <点1>, <点2>, <点3>, <类型数值 1-纽伯格立方|2-汤姆森立方|3-麦凯立方|4-达布立方|5-拿破仑/费尔巴哈立方|7-卢卡斯立方|17-第一布罗卡立方|18-第二布罗卡立方> ]
Curvature=曲率
Curvature.Syntax=[ <点>, <对象> ]
CurvatureVector=曲率向量
CurvatureVector.Syntax=[ <点>, <对象> ]
CurveCartesian=曲线
CurveCartesian.Syntax=[ <x(t)>, <y(t)>, <参变量t>, <t-起始值>, <t-终止值> ]
CurveCartesian.Syntax3D=[ <x(t)>, <y(t)>, <参变量t>, <t-起始值>, <t-终止值> ]\n[ <x(t)>, <y(t)>, <z(t)>, <参变量t>, <t-起始值>, <t-终止值> ]
Cylinder=圆柱
Cylinder.Syntax=[ <圆锥曲线底面>, <高度> ]\n[ <下底圆心>, <上底圆心>, <半径> ]
CylinderInfinite=无限长圆柱
CylinderInfinite.Syntax=[ <轴线>, <半径> ]\n[ <轴线上的一点>, <轴向量>, <半径> ]\n[ <轴线上点1>, <轴线上点2>, <半径> ]
DataFunction=数据函数
DataFunction.Syntax=[ <数值列表1>, <数值列表2> ]
Defined=是否已定义
Defined.Syntax=[ <对象> ]
Degree=多项式次数
Degree.Syntax=[ <多项式> ]
Degree.SyntaxCAS=[ <多项式> ]\n[ <多项式>, <变量> ]
DelauneyTriangulation=Delaunay三角网
DelauneyTriangulation.Syntax=[ <点列> ]
Delete=删除
Delete.Syntax=[ <对象> ]
Denominator=分母
Denominator.Syntax=[ <数值> ]\n[ <函数> ]
Denominator.SyntaxCAS=[ <表达式> ]
DensityPlot=密度图
Derivative=导数
Derivative.Syntax=[ <函数> ]\n[ <曲线> ]\n[ <函数>, <阶数> ]\n[ <函数>, <变量> ]\n[ <曲线>, <阶数> ]\n[ <函数>, <变量>, <阶数> ]
Derivative.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]\n[ <表达式>, <变量>, <阶数> ]
Determinant=行列式
Determinant.Syntax=[ <矩阵> ]
Diameter=共轭直径
Diameter.Syntax=[ <向量>, <圆锥曲线> ]\n[ <直线>, <圆锥曲线> ]
Difference=差集
Difference.Syntax=[ <多边形1>, <多边形2> ]
Dilate=位似
Dilate.Syntax=[ <几何对象>, <位似比> ]\n[ <几何对象>, <位似比>, <位似中心> ]
Dimension=维度
Dimension.Syntax=[ <点|向量|矩阵> ]
Direction=方向向量
Direction.Syntax=[ <直线|射线|线段> ]
Directrix=准线
Directrix.Syntax=[ <圆锥曲线> ]
Distance=距离
Distance.Syntax=[ <点>, <对象> ]\n[ <直线1>, <直线2> ]\n[ <平面1>, <平面2> ]
Div=商式
Div.Syntax=[ <被除数 @整数>, <除数 @整数> ]\n[ <被除式 @整式>, <除式 @整式> ]
Division=除法
Division.Syntax=[ <被除数 @整数>, <除数 @整数> ]\n[ <被除式 @整式>, <除式 @整式> ]
Divisors=因数个数
Divisors.Syntax=[ <正整数> ]
DivisorsList=因数列表
DivisorsList.Syntax=[ <正整数> ]
DivisorsSum=因数和
DivisorsSum.Syntax=[ <正整数> ]
Dodecahedron=正十二面体
Dodecahedron.Syntax=[ <正五边形> ]\n[ <点1>, <点2>, <点3> ]\n[ <点1>, <点2>, <垂直于线段"点1点2"的向量|线段|射线|直线; 或者平行于线段"点1点2"的多边形|平面> ]
Dot=点积
Dot.Syntax=[ <向量1>, <向量2> ]
DotPlot=点阵图
DotPlot.Syntax=[ <原始数据列表>, <堆栈相邻点(可选)>, <缩放因子(可选)> ]
DynamicCoordinates=动态坐标
DynamicCoordinates.Syntax=[ <点>, <横坐标x>, <纵坐标y> ]\n[ <点>, <横坐标x>, <纵坐标y>, <竖坐标z> ]
Eccentricity=离心率
Eccentricity.Syntax=[ <圆锥曲线> ]
Eigenvalues=特征值
Eigenvalues.SyntaxCAS=[ <矩阵> ]
Eigenvectors=特征向量
Eigenvectors.SyntaxCAS=[ <矩阵> ]
Element=元素
Element.Syntax=[ <列表>, <元素位置> ]\n[ <矩阵>, <行序>, <列序> ]\n[ <列表>, <索引1>, <索引2>, ... ]
Element.SyntaxCAS=[ <列表>, <元素位置> ]\n[ <矩阵>, <行序>, <列序> ]
Eliminate=消元
Eliminate.Syntax=[ <多项式列表>, <变量列表> ]
Ellipse=椭圆
Ellipse.Syntax=[ <焦点1>, <焦点2>, <主半轴长> ]\n[ <焦点1>, <焦点2>, <主半轴线段> ]\n[ <焦点1>, <焦点2>, <椭圆上一点> ]
Ends=底面
Ends.Syntax=[ <二次曲面> ]
Envelope=包络
Envelope.Syntax=[ <路径>, <点> ]
Erlang=爱尔朗分布
Erlang.Syntax=[ <形状参数k>, <比率参数λ>, <变量值> ]\n[ <形状参数k>, <比率参数λ>, <变量值>, <是否累积? true|false> ]\n[ <形状参数k>, <比率参数λ>, x, <是否累积? true|false> ]
Evaluate=计算
Excentricity=半焦距
Excentricity.Syntax=[ <圆锥曲线> ]
Execute=执行
Execute.Syntax=[ <文本列表> ]\n[ <文本列表>, <参数1>, <参数2>, ... ]
Expand=展开
Expand.Syntax=[ <表达式> ]
Exponential=指数分布
Exponential.Syntax=[ <率参数λ>, <变量值> ]\n[ <率参数λ>, <变量值>, <是否累积? true|false> ]\n[ <率参数λ>, x, <是否累积? true|false> ]
Exponential.SyntaxCAS=[ <率参数λ>, <变量值> ]
ExportImage=导出图片
ExportImage.Syntax=[ <属性1>, <属性值1>, <属性2>, <属性值2>, ... ]
Extremum=极值点
Extremum.Syntax=[ <多项式> ]\n[ <连续函数>, <x-起始值>, <x-终止值> ]
FDistribution=F分布
FDistribution.Syntax=[ <分子自由度>, <分母自由度>, <变量值> ]\n[ <分子自由度>, <分母自由度>, <变量值>, <是否累积? true|false> ]\n[ <分子自由度>, <分母自由度>, x, <是否累积? true|false> ]
FDistribution.SyntaxCAS=[ <分子自由度>, <分母自由度>, <变量值> ]
Factor=因式分解
Factor.Syntax=[ <多项式> ]
Factor.SyntaxCAS=[ <整数> ]\n[ <多项式> ]\n[ <表达式>, <变量> ]
Factors=因式
Factors.Syntax=[ <多项式> ]\n[ <数值> ]
FillCells=填充单元格
FillCells.Syntax=[ <单元格区域>, <对象> ]\n[ <单元格>, <列表> ]\n[ <单元格>, <矩阵> ]
FillColumn=填充列
FillColumn.Syntax=[ <列序>, <列表> ]
FillRow=填充行
FillRow.Syntax=[ <行序>, <列表> ]
First=最前元素
First.Syntax=[ <列表> ]\n[ "<文本>" ]\n[ <列表>, <最前元素数量> ]\n[ "<文本>", <最前元素数量> ]\n[ <轨迹>, <最前元素数量> ]
First.SyntaxCAS=[ <列表> ]\n[ <列表>, <前若干元素数量> ]
FirstAxis=主轴
FirstAxis.Syntax=[ <圆锥曲线> ]
FirstAxisLength=主半轴长
FirstAxisLength.Syntax=[ <圆锥曲线> ]
Fit=拟合曲线
Fit.Syntax=[ <点列>, <函数列表> ]\n[ <点列>, <函数> ]
FitExp=指数拟合
FitExp.Syntax=[ <点列> ]
FitGrowth=生长曲线拟合
FitGrowth.Syntax=[ <点列> ]
FitImplicit=隐函数拟合
FitImplicit.Syntax=[ <点列>, <次数> ]
FitLineX=拟合直线X
FitLineX.Syntax=[ <点列> ]
FitLineY=拟合直线Y
FitLineY.Syntax=[ <点列> ]
FitLog=对数拟合
FitLog.Syntax=[ <点列> ]
FitLogistic=逻辑斯蒂曲线拟合
FitLogistic.Syntax=[ <点列> ]
FitPoly=多项式拟合
FitPoly.Syntax=[ <点列>, <多项式次数> ]\n[ <手绘函数>, <多项式次数> ]
FitPow=幂函数拟合
FitPow.Syntax=[ <第一象限点列> ]
FitSin=正弦拟合
FitSin.Syntax=[ <点列> ]
Flatten=扁平列表
Flatten.Syntax=[ <列表> ]
Focus=焦点
Focus.Syntax=[ <圆锥曲线> ]
FractionText=分数文本
FractionText.Syntax=[ <数值> ]\n[ <点> ]
Frequency=频数列表
Frequency.Syntax=[ <原始数据列表> ]\n[ <是否累积? true|false>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表> ]\n[ <文本列表1>, <文本列表2> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]
FrequencyPolygon=频数多边形
FrequencyPolygon.Syntax=[ <组界列表>, <高度列表> ]\n[ <组界列表>, <原始数据列表>, <是否应用密度? true|false>, <密度缩放因子(可选)> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表>, <是否应用密度? true|false>, <密度缩放因子(可选)> ]
FrequencyTable=频数表
FrequencyTable.Syntax=[ <原始数据列表>, <缩放因子(可选)> ]\n[ <是否累积? true|false>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表> ]\n[ <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]
FromBase=转换为十进制
FromBase.Syntax=[ "<指定进制型数值>", <进制(基数) 2~36> ]
Function=函数
Function.Syntax=[ <{x-起始值, x-终止值, 区间上若干纵坐标值}> ]\n[ <函数>, <x-起点值>, <x-终点值> ]
Function.Syntax3D=[ <{x-起始值, x-终止值, 区间内等间距的若干纵坐标值}> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <表达式>, <参变量1>, <起始值>, <终止值>, <参变量2>, <起始值>, <终止值> ]
Function.SyntaxCAS=[ <函数>, <x-起始值>, <x-终止值> ]
FutureValue=未来值
FutureValue.Syntax=[ <利率>, <期数>, <每期付款额>, <现值(可选)>, <类型(可选) 1-期初|0-期末> ]
GCD=最大公约数
GCD.Syntax=[ <整数列表> ]\n[ <整数1>, <整数2> ]
GCD.SyntaxCAS=[ <整数列表> ]\n[ <多项式列表> ]\n[ <整数1>, <整数2> ]\n[ <多项式1>, <多项式2> ]
Gamma=伽玛分布
Gamma.Syntax=[ <形状参数α>, <尺度参数β>, <变量值> ]\n[ <形状参数α>, <尺度参数β>, <变量值>, <是否累积? true|false> ]\n[ <形状参数α>, <尺度参数β>, x, <是否累积? true|false> ]
Gamma.SyntaxCAS=[ <形状参数α>, <尺度参数β>, <变量值> ]
GeometricMean=几何平均数
GeometricMean.Syntax=[ <数值列表> ]
GetTime=系统时间
GetTime.Syntax=[ ]\n[ "<格式>" ]
GroebnerDegRevLex=分次反字典序Groebner基
GroebnerDegRevLex.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
GroebnerLex=字典序Groebner基
GroebnerLex.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
GroebnerLexDeg=分次字典序Groebner基
GroebnerLexDeg.Syntax=[ <多项式列表> ]\n[ <多项式列表>, <变量列表> ]
HarmonicMean=调和平均数
HarmonicMean.Syntax=[ <数值列表> ]
Height=高度
Height.Syntax=[ <立体图形> ]
HideLayer=隐藏图层
HideLayer.Syntax=[ <图层编号 0~9> ]
Histogram=直方图
Histogram.Syntax=[ <组界列表>, <高度列表> ]\n[ <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]
HistogramRight=直方图右和
HistogramRight.Syntax=[ <组界列表>, <高度列表> ]\n[ <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]\n[ <是否累积? true|false>, <组界列表>, <原始数据列表>, <是否应用密度>, <密度缩放因子(可选)> ]
HyperGeometric=超几何分布
HyperGeometric.Syntax=[ <总体容量>, <成功次数>, <样本容量> ]\n[ <总体容量>, <成功次数>, <样本容量>, <是否累积? true|false> ]\n[ <总体容量>, <成功次数>, <样本容量>, <变量值>, <是否累积? true|false> ]
HyperGeometric.SyntaxCAS=[ <总体容量>, <成功次数>, <样本容量>, <变量值>, <是否累积? true|false> ]
Hyperbola=双曲线
Hyperbola.Syntax=[ <焦点1>, <焦点2>, <主半轴长> ]\n[ <焦点1>, <焦点2>, <主半轴线段> ]\n[ <焦点1>, <焦点2>, <双曲线上一点> ]
IFactor=实数域因式分解
IFactor.Syntax=[ <多项式> ]
IFactor.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <变量> ]
Icosahedron=正二十面体
Icosahedron.Syntax=[ <等边三角形> ]\n[ <点1>, <点2>, <点3> ]\n[ <点1>, <点2>, <垂直于线段"点1点2"的向量|线段|射线|直线; 或者平行于线段"点1点2"的多边形|平面> ]
Identity=单位矩阵
Identity.Syntax=[ <数值> ]
If=如果
If.Syntax=[ <条件>, <结果> ]\n[ <条件>, <结果>, <否则> ]
ImplicitCurve=隐式曲线
ImplicitCurve.Syntax=[ <点列-点数为(n(n+3))/2, 曲线次数为n> ]\n[ <f(x, y)> ]
ImplicitDerivative=隐式微分
ImplicitDerivative.SyntaxCAS=[ <f(x, y)> ]\n[ <表达式>, <因变量>, <自变量> ]
Incircle=内切圆
Incircle.Syntax=[ <点1>, <点2>, <点3> ]
IndexOf=索引
IndexOf.Syntax=[ <对象>, <列表> ]\n[ "<文本1>", "<文本2>" ]\n[ <对象>, <列表>, <起始索引> ]\n[ "<文本1>", "<文本2>", <起始索引> ]
Insert=插入
Insert.Syntax=[ <列表1>, <列表2>, <列表2中序数位置> ]\n[ <对象>, <列表>, <列表中序数位置> ]
Integral=积分
Integral.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <x-积分下限>, <x-积分上限> ]\n[ <函数>, <x-积分下限>, <x-积分上限>, <是否给出积分值? true|false> ]
Integral.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <x-积分下限>, <x-积分上限> ]\n[ <函数>, <变量>, <积分下限>, <积分上限> ]
IntegralBetween=积分介于
IntegralBetween.Syntax=[ <函数1>, <函数2>, <x-积分下限>, <x-积分上限> ]\n[ <函数1>, <函数2>, <x-积分下限>, <x-积分上限>, <是否给出积分值? true|false> ]
IntegralBetween.SyntaxCAS=[ <函数1>, <函数2>, <x-积分下限>, <x-积分上限> ]\n[ <函数1>, <函数2>, <变量>, <积分下限>, <积分上限> ]
IntegralSymbolic=不定积分
IntegralSymbolic.Syntax=[ <函数> ]\n[ <函数>, <变量> ]
InteriorAngles=内角
InteriorAngles.Syntax=[ <多边形> ]
Intersect=交点
Intersect.Syntax=[ <对象1>, <对象2> ]\n[ <对象1>, <对象2>, <交点索引> ]\n[ <对象1>, <对象2>, <起点> ]\n[ <函数1>, <函数2>, <x-起始值>, <x-终止值> ]\n[ <曲线1>, <曲线2>, <参数1>, <参数2> ]
Intersect.SyntaxCAS=[ <函数1>, <函数2> ]
IntersectConic=相交曲线
IntersectConic.Syntax=[ <平面>, <二次曲面> ]\n[ <二次曲面1>, <二次曲面2> ]
IntersectPath=相交路径
IntersectPath.Syntax=[ <直线>, <多边形> ]\n[ <多边形1>, <多边形2> ]
IntersectPath.Syntax3D=[ <直线>, <多边形> ]\n[ <多边形1>, <多边形2> ]\n[ <平面>, <多边形> ]\n[ <平面>, <二次曲面> ]
Intersection=交集
Intersection.Syntax=[ <列表1>, <列表2> ]
InverseBinomial=逆二项分布
InverseBinomial.Syntax=[ <试验次数>, <成功概率>, <概率> ]
InverseCauchy=逆柯西分布
InverseCauchy.Syntax=[ <中位数>, <尺度参数λ>, <概率> ]
InverseChiSquared=逆卡方分布
InverseChiSquared.Syntax=[ <自由度>, <概率> ]
InverseExponential=逆指数分布
InverseExponential.Syntax=[ <率参数λ>, <概率> ]
InverseFDistribution=逆F分布
InverseFDistribution.Syntax=[ <分子自由度>, <分母自由度>, <概率> ]
InverseGamma=逆伽玛分布
InverseGamma.Syntax=[ <形状参数α>, <尺度参数β>, <概率> ]
InverseHyperGeometric=逆超几何分布
InverseHyperGeometric.Syntax=[ <总体容量>, <成功次数>, <样本容量>, <概率> ]
InverseLaplace=拉普拉斯逆变换
InverseLaplace.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <变量1>, <变量2> ]
InverseLogNormal=逆对数正态分布
InverseLogNormal.Syntax=[ <平均数>, <标准差>, <概率> ]
InverseLogistic=逆逻辑分布
InverseLogistic.Syntax=[ <平均数>, <尺度参数λ>, <概率> ]
InverseNormal=逆正态分布
InverseNormal.Syntax=[ <平均数>, <标准差>, <概率> ]
InversePascal=逆帕斯卡分布
InversePascal.Syntax=[ <成功次数>, <成功概率>, <概率> ]
InversePoisson=逆泊松分布
InversePoisson.Syntax=[ <平均数>, <概率> ]
InverseTDistribution=逆t分布
InverseTDistribution.Syntax=[ <自由度>, <概率> ]
InverseWeibull=逆威布尔分布
InverseWeibull.Syntax=[ <形状参数k>, <尺度参数λ>, <概率> ]
InverseZipf=逆齐普夫分布
InverseZipf.Syntax=[ <元素数量>, <指数>, <概率> ]
Invert=逆反
Invert.Syntax=[ <矩阵> ]\n[ <函数> ]
IsInRegion=是否在区域内
IsInRegion.Syntax=[ <点>, <区域> ]
IsInteger=是否为整数
IsInteger.Syntax=[ <数值> ]
IsPrime=是否为质数
IsPrime.Syntax=[ <数值> ]
IsTangent=是否相切
IsTangent.Syntax=[ <直线>, <圆锥曲线> ]
IsVertexForm=是否为顶点式
IsVertexForm.Syntax=[ <函数> ]
Iteration=迭代
Iteration.Syntax=[ <函数>, <起始值>, <迭代次数> ]\n[ <表达式>, <变量>, <起始值>, <迭代次数> ]
IterationList=迭代列表
IterationList.Syntax=[ <函数>, <起始值>, <迭代次数> ]\n[ <表达式>, <变量>, <起始值>, <迭代次数> ]
Join=合并
Join.Syntax=[ <列表的列表> ]\n[ <列表1>, <列表2>, ... ]
JordanDiagonalization=约当对角化
JordanDiagonalization.SyntaxCAS=[ <矩阵> ]
KeepIf=条件子列
KeepIf.Syntax=[ <条件>, <列表> ]\n[ <条件>, <变量>, <列表> ]
LCM=最小公倍数
LCM.Syntax=[ <整数列表> ]\n[ <整数1>, <整数2> ]
LCM.SyntaxCAS=[ <整数列表> ]\n[ <多项式列表> ]\n[ <整数1>, <整数2> ]\n[ <多项式1>, <多项式2> ]
LaTeX=公式文本
LaTeX.Syntax=[ <对象> ]\n[ <对象>, <是否替换变量? true|false> ]\n[ <对象>, <是否替换变量? true|false>, <是否显示名称? true|false> ]
Laplace=拉普拉斯变换
Laplace.Syntax=[ <函数> ]\n[ <函数>, <变量> ]\n[ <函数>, <变量1>, <变量2> ]
Last=最后元素
Last.Syntax=[ <列表> ]\n[ "<文本>" ]\n[ <列表>, <最后元素数量> ]\n[ "<文本>", <最后元素数量> ]
Last.SyntaxCAS=[ <列表> ]\n[ <列表>, <最后元素数量> ]
LeftSide=左边
LeftSide.Syntax=[ <方程> ]
LeftSide.SyntaxCAS=[ <方程> ]\n[ <方程组列表> ]\n[ <方程组列表>, <列表索引> ]
LeftSum=左和
LeftSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
Length=长度
Length.Syntax=[ <几何对象> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <起始点>, <终止点> ]\n[ <曲线>, <t-起始值>, <t-终止值> ]\n[ <曲线>, <起始点>, <终止点> ]
Length.SyntaxCAS=[ <列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]\n[ <函数>, <变量>, <起始值>, <终止值> ]
LetterToUnicode=字母转换为统一码
LetterToUnicode.Syntax=[ "<字母>" ]
Limit=极限
Limit.Syntax=[ <函数>, <数值> ]
Limit.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
LimitAbove=右极限
LimitAbove.Syntax=[ <函数>, <数值> ]
LimitAbove.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
LimitBelow=左极限
LimitBelow.Syntax=[ <函数>, <数值> ]
LimitBelow.SyntaxCAS=[ <表达式>, <数值> ]\n[ <表达式>, <变量>, <数值> ]
Line=直线
Line.Syntax=[ <点1>, <点2> ]\n[ <点>, <平行线> ]\n[ <点>, <方向向量> ]
LineBisector=中垂线
LineBisector.Syntax=[ <线段> ]\n[ <点1>, <点2> ]
LineBisector.Syntax3D=[ <线段> ]\n[ <点1>, <点2> ]\n[ <点1>, <点2>, <方向向量> ]
LineGraph=折线图
LineGraph.Syntax=[ <x坐标列表>, <y坐标列表> ]
Locus=轨迹
Locus.Syntax=[ <构造轨迹的点>, <控制点> ]\n[ <构造轨迹的点>, <滑动条> ]\n[ <斜率场>, <点> ]\n[ <f(x, y)>, <点> ]
LocusEquation=轨迹方程
LocusEquation.Syntax=[ <轨迹> ]\n[ <轨迹点>, <动点> ]\n[ <布尔表达式>, <自由点> ]
LogNormal=对数正态分布
LogNormal.Syntax=[ <平均数>, <标准差>, <变量值> ]\n[ <平均数>, <标准差>, <变量值>, <是否累积? true|false> ]\n[ <平均数>, <标准差>, x, <是否累积? true|false> ]
Logistic=逻辑分布
Logistic.Syntax=[ <平均数μ>, <尺度参数λ>, <变量值> ]\n[ <平均数μ>, <尺度参数λ>, <变量值>, <是否累积? true|false> ]\n[ <平均数μ>, <尺度参数λ>, x, <是否累积? true|false> ]
LowerSum=下和
LowerSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
MAD=平均绝对偏差
MAD.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
MatrixPlot=矩阵图
MatrixRank=矩阵的秩
MatrixRank.Syntax=[ <矩阵> ]
Max=最大值
Max.Syntax=[ <区间 如: 2<x<3> ]\n[ <数值列表> ]\n[ <数值1>, <数值2> ]\n[ <数据列表>, <频数列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Max.SyntaxCAS=[ <数值列表> ]\n[ <数值1>, <数值2> ]
Maximize=最大值点
Maximize.Syntax=[ <因变数>, <滑动条> ]\n[ <因变数>, <界点> ]
Mean=平均数
Mean.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Mean.SyntaxCAS=[ <数值列表> ]
MeanX=横坐标平均数
MeanX.Syntax=[ <点列> ]
MeanY=纵坐标平均数
MeanY.Syntax=[ <点列> ]
Median=中位数
Median.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Median.SyntaxCAS=[ <数值列表> ]
Midpoint=中点
Midpoint.Syntax=[ <线段> ]\n[ <圆锥曲线> ]\n[ <区间> ]\n[ <点1>, <点2> ]
Min=最小值
Min.Syntax=[ <区间 如: 2<x<3> ]\n[ <数值列表> ]\n[ <数值1>, <数值2> ]\n[ <数据列表>, <频数列表> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Min.SyntaxCAS=[ <数值列表> ]\n[ <数值1>, <数值2> ]
Minimize=最小值点
Minimize.Syntax=[ <因变数>, <滑动条> ]\n[ <因变数>, <界点> ]
MinimumSpanningTree=最小生成树
MinimumSpanningTree.Syntax=[ <点列> ]
Mirror=对称
Mirror.Syntax=[ <几何对象>, <点> ]\n[ <几何对象>, <直线> ]\n[ <几何对象>, <圆> ]
Mirror.Syntax3D=[ <几何对象>, <对称中心点> ]\n[ <几何对象>, <对称轴 直线|射线|线段> ]\n[ <几何对象>, <对称平面> ]\n[ <几何对象>, <反演基圆> ]
MixedNumber=带分数
MixedNumber.SyntaxCAS=[ <数值> ]
Mod=余式
Mod.Syntax=[ <被除数 @整数>, <除数 @整数> ]\n[ <被除式 @整式>, <除式 @整式> ]
Mode=众数
Mode.Syntax=[ <数值列表> ]
NDerivative=数值导数
NDerivative.Syntax=[ <函数> ]\n[ <函数>, <阶数> ]
NIntegral=定积分
NIntegral.Syntax=[ <函数> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
NIntegral.SyntaxCAS=[ <函数>, <x-积分下限>, <x-积分上限> ]\n[ <函数>, <变量>, <积分下限>, <积分上限> ]
NInvert=反函数
NInvert.Syntax=[ <函数> ]
NSolutions=近似解集
NSolutions.Syntax=[ <方程> ]
NSolutions.SyntaxCAS=[ <方程> ]\n[ <方程>, <变量> ]\n[ <方程>, <变量 = 初值> ]\n[ <方程列表>, <变量列表> ]
NSolve=近似解
NSolve.Syntax=[ <方程> ]
NSolve.SyntaxCAS=[ <方程> ]\n[ <方程>, <变量> ]\n[ <方程>, <变量 = 初值> ]\n[ <方程列表>, <变量列表> ]
NSolveODE=解常微分方程组
NSolveODE.Syntax=[ <导数列表>, <x坐标初值>, <y坐标初值列表>, <x坐标终值> ]
Name=名称
Name.Syntax=[ <对象> ]
Net=展开图
Net.Syntax=[ <多面体>, <展开程度值 0~1> ]\n[ <多面体>, <展开程度值 0~1>, <面>, <棱1>, <棱2>, ... ]
NextPrime=后一质数
NextPrime.Syntax=[ <数值> ]
Normal=正态分布
Normal.Syntax=[ <平均数>, <标准差>, <变量值> ]\n[ <平均数>, <标准差>, <变量值>, <是否累积? true|false> ]\n[ <平均数>, <标准差>, x, <是否累积? true|false> ]
Normal.SyntaxCAS=[ <平均数>, <标准差>, <变量数值> ]
NormalQuantilePlot=正态分位数图
NormalQuantilePlot.Syntax=[ <原始数据列表> ]
Normalize=归一化
Normalize.Syntax=[ <数值列表> ]\n[ <点列> ]
Numerator=分子
Numerator.Syntax=[ <数值> ]\n[ <函数> ]
Numerator.SyntaxCAS=[ <表达式> ]
Numeric=近似数
Numeric.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <有效数字个数> ]
Object=对象
Object.Syntax=[ <对象名称文本> ]
Octahedron=正八面体
Octahedron.Syntax=[ <等边三角形> ]\n[ <点1>, <点2>, <点3> ]\n[ <点1>, <点2>, <垂直于线段"点1点2"的向量|线段|射线|直线; 或者平行于线段"点1点2"的多边形|平面> ]
Ordinal=序数
Ordinal.Syntax=[ <自然数> ]
OrdinalRank=序数列表
OrdinalRank.Syntax=[ <列表> ]
OrthogonalLine=垂线
OrthogonalLine.Syntax=[ <点>, <直线> ]\n[ <点>, <线段> ]\n[ <点>, <向量> ]
OrthogonalLine.Syntax3D=[ <点>, <直线> ]\n[ <点>, <线段> ]\n[ <点>, <向量> ]\n[ <点>, <平面> ]\n[ <直线1>, <直线2> ]\n[ <点>, <向量1>, <向量2> ]\n[ <点>, <直线>, <平面xOy｜3D 空间> ]
OrthogonalPlane=垂直平面
OrthogonalPlane.Syntax=[ <点>, <直线> ]\n[ <点>, <向量> ]
OrthogonalVector=法向量
OrthogonalVector.Syntax=[ <直线> ]\n[ <线段> ]\n[ <向量> ]
OrthogonalVector.Syntax3D=[ <直线> ]\n[ <线段> ]\n[ <向量> ]\n[ <平面> ]
OrthogonalVector.SyntaxCAS=[ <向量> ]
OsculatingCircle=密切圆
OsculatingCircle.Syntax=[ <点>, <对象> ]
PMCC=相关系数
PMCC.Syntax=[ <点列> ]\n[ <x坐标列表>, <y坐标列表> ]
Pan=移动视图
Pan.Syntax=[ <横向移动的像素量, 向左为正|向右为负>, <纵向移动的像素量, 向下为正|向上为负> ]
Pan.Syntax3D=[ <横坐标x>, <纵坐标y> ]\n[ <横坐标x>, <纵坐标y>, <竖坐标z> ]
Parabola=抛物线
Parabola.Syntax=[ <焦点>, <准线> ]
Parameter=焦参数
Parameter.Syntax=[ <抛物线> ]
ParametricDerivative=参数导数
ParametricDerivative.Syntax=[ <曲线> ]
ParseToFunction=解析为函数
ParseToFunction.Syntax=[ <函数>, <字符串> ]
ParseToNumber=解析为数
ParseToNumber.Syntax=[ <数值>, <字符串> ]
PartialFractions=部分分式
PartialFractions.Syntax=[ <函数> ]
PartialFractions.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]
Pascal=帕斯卡分布
Pascal.Syntax=[ <成功次数>, <成功概率> ]\n[ <成功次数>, <成功概率>, <是否累积? true|false> ]\n[ <成功次数>, <成功概率>, <变量值>, <是否累积? true|false> ]
Pascal.SyntaxCAS=[ <成功次数>, <成功概率>, <变量值>, <是否累积? true|false> ]
PathParameter=路径值
PathParameter.Syntax=[ <路径上的点> ]
Payment=每期付款额
Payment.Syntax=[ <利率>, <期数>, <现值>, <未来值(可选)>, <类型(可选) 1-期初|0-期末> ]
Percentile=百分位数
Percentile.Syntax=[ <数值列表>, <百分数> ]
Perimeter=周长
Perimeter.Syntax=[ <多边形> ]\n[ <圆锥曲线> ]\n[ <轨迹> ]
Periods=期数
Periods.Syntax=[ <利率>, <每期付款额>, <现值>, <未来值(可选)>, <类型(可选) 1-期初|0-期末> ]
PieChart=扇形图
PieChart.Syntax=[ <频数列表> ]\n[ <频数列表>, <中心>, <半径> ]
Plane=平面
Plane.Syntax=[ <多边形> ]\n[ <圆锥曲线> ]\n[ <点>, <平行的平面> ]\n[ <点>, <经过的直线> ]\n[ <直线1>, <直线2> ]\n[ <点1>, <点2>, <点3> ]\n[ <点>, <向量1>, <向量2> ]
PlaneBisector=中垂面
PlaneBisector.Syntax=[ <线段> ]\n[ <点1>, <点2> ]
PlaySound=播放声音
PlaySound.Syntax=[ <网址> ]\n[ <是否播放? true|false> ]\n[ <函数>, <最小值>, <最大值> ]\n[ <函数>, <最小值>, <最大值>, <采样率>, <样本深度> ]
PlotSolve=求解绘图
PlotSolve.Syntax=[ <关于 x 的方程> ]
Point=描点
Point.Syntax=[ <几何对象> ]\n[ <有序数组列表> ]\n[ <几何对象>, <路径值> ]\n[ <点>, <向量> ]
PointIn=内点
PointIn.Syntax=[ <区域> ]
PointList=点列
PointList.Syntax=[ <有序数组列表的列表> ]
Poisson=泊松分布
Poisson.Syntax=[ <平均数> ]\n[ <平均数>, <是否累积? true|false> ]\n[ <平均数>, <变量值>, <是否累积? true|false> ]
Poisson.SyntaxCAS=[ <平均数>, <变量值>, <是否累积? true|false> ]
Polar=极线
Polar.Syntax=[ <点>, <圆锥曲线> ]\n[ <直线>, <圆锥曲线> ]
PolyLine=折线
PolyLine.Syntax=[ <点列> ]\n[ <点1>, ..., <点n> ]
Polygon=多边形
Polygon.Syntax=[ <点列> ]\n[ <点1>, ..., <点n> ]\n[ <点1>, <点2>, <顶点数> ]
Polygon.Syntax3D=[ <点列> ]\n[ <点1>, ..., <点n> ]\n[ <点1>, <点2>, <顶点数> ]\n[ <点1>, <点2>, <顶点数>, <方向向量> ]
Polynomial=多项式函数
Polynomial.Syntax=[ <函数> ]\n[ <点列> ]
Polynomial.SyntaxCAS=[ <函数> ]\n[ <函数>, <变量> ]
PresentValue=现值
PresentValue.Syntax=[ <利率>, <期数>, <每期付款额>, <未来值(可选)>, <类型(可选) 1-期初|0-期末> ]
PreviousPrime=前一质数
PreviousPrime.Syntax=[ <数值> ]
PrimeFactors=质因数
PrimeFactors.Syntax=[ <数值> ]
Prism=棱柱
Prism.Syntax=[ <多边形>, <最高点> ]\n[ <多边形>, <高度> ]\n[ <点1>, <点2>, ... ]
Product=乘积
Product.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <前若干元素数量> ]\n[ <数值列表>, <频数列表> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
Product.SyntaxCAS=[ <表达式列表> ]\n[ <表达式>, <变量>, <变量起始值>, <变量终止值> ]
Prove=证明
Prove.Syntax=[ <布尔表达式> ]
ProveDetails=证明过程
ProveDetails.Syntax=[ <布尔表达式> ]
Pyramid=棱锥
Pyramid.Syntax=[ <多边形>, <顶点> ]\n[ <多边形>, <高度> ]\n[ <点1>, <点2>, <点3>, <点4>, ... ]
Q1=第一四分位数
Q1.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Q3=第三四分位数
Q3.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
QuadricSide=侧面
QuadricSide.Syntax=[ <二次曲面> ]
RSquare=可决系数R方
RSquare.Syntax=[ <点列>, <函数> ]
Radius=半径
Radius.Syntax=[ <圆> ]
Random=区间随机数
Random.Syntax=[ <最小整数>, <最大整数> ]\n[ <最小整数>, <最大整数>, <是否固定? true|false> ]
Random.SyntaxCAS=[ <最小整数>, <最大整数> ]
RandomBinomial=随机二项分布数
RandomBinomial.Syntax=[ <试验次数>, <概率> ]
RandomDiscrete=离散随机数
RandomDiscrete.Syntax=[ <数值列表>, <(相对)概率列表> ]
RandomElement=随机元素
RandomElement.Syntax=[ <列表> ]
RandomNormal=正态分布随机数
RandomNormal.Syntax=[ <平均数>, <标准差> ]
RandomPointIn=随机内点
RandomPointIn.Syntax=[ <多边形|封闭圆锥曲线> ]\n[ <点1>, <点2>, <点3>, <...> ]\n[ <x最小值>, <x最大值>, <y最小值>, <y最大值> ]
RandomPoisson=泊松分布随机数
RandomPoisson.Syntax=[ <平均数> ]
RandomPolynomial=随机多项式
RandomPolynomial.Syntax=[ <次数>, <最小系数>, <最大系数> ]
RandomPolynomial.SyntaxCAS=[ <次数>, <最小系数>, <最大系数> ]\n[ <变量>, <次数>, <最小系数>, <最大系数> ]
RandomUniform=均匀分布随机数
RandomUniform.Syntax=[ <最小值>, <最大值> ]\n[ <最小值>, <最大值>, <样本数量> ]
Rate=利率
Rate.Syntax=[ <期数>, <每期付款额>, <现值>, <未来值(可选)>, <类型(可选) 1-期初|0-期末>, <预期利率(可选) 0~1> ]
Rationalize=有理化
Rationalize.SyntaxCAS=[ <数值> ]
Ray=射线
Ray.Syntax=[ <起点>, <点> ]\n[ <起点>, <方向向量> ]
ReadText=阅读文本
ReadText.Syntax=[ "<文本>" ]
RectangleSum=矩形法则
RectangleSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量>, <矩形起始位置 0-左和~1-右和> ]
ReducedRowEchelonForm=简化行梯阵式
ReducedRowEchelonForm.Syntax=[ <矩阵> ]
Relation=关系
Relation.Syntax=[ <列表> ]\n[ <对象1>, <对象2> ]
RemovableDiscontinuity=可去间断点
RemovableDiscontinuity.Syntax=[ <函数> ]
Remove=去除
Remove.Syntax=[ <列表1>, <列表2> ]
RemoveUndefined=去除未定义对象
RemoveUndefined.Syntax=[ <列表> ]
Rename=重命名
Rename.Syntax=[ <对象>, <名称> ]
Repeat=重复
Repeat.Syntax=[ <重复次数>, <脚本指令1>, <脚本指令2>, ... ]
ReplaceAll=替换所有
ReplaceAll.Syntax=[ "<文本>", "<要匹配的文本>", "<要替换的文本>" ]
ResidualPlot=残差图
ResidualPlot.Syntax=[ <点列>, <函数> ]
Reverse=逆序排列
Reverse.Syntax=[ <列表> ]
RightSide=右边
RightSide.Syntax=[ <方程> ]
RightSide.SyntaxCAS=[ <方程> ]\n[ <方程组列表> ]\n[ <方程组列表>, <列表索引> ]
RigidPolygon=刚体多边形
RigidPolygon.Syntax=[ <多边形> ]\n[ <多边形>, <x偏移量>, <y偏移量> ]\n[ <自由点1>, ..., <自由点n> ]
Root=零点
Root.Syntax=[ <多项式> ]\n[ <函数>, <x-初值> ]\n[ <函数>, <x-起始值>, <x-终止值> ]
Root.SyntaxCAS=[ <多项式> ]
RootList=零值点列
RootList.Syntax=[ <数值列表> ]
RootMeanSquare=均方根
RootMeanSquare.Syntax=[ <数值列表> ]
Roots=零值点
Roots.Syntax=[ <函数>, <x-起始值>, <x-终止值> ]
Rotate=旋转
Rotate.Syntax=[ <几何对象>, <度|弧度> ]\n[ <几何对象>, <度|弧度>, <旋转中心> ]
Rotate.Syntax3D=[ <几何对象>, <度|弧度> ]\n[ <几何对象>, <度|弧度>, <旋转中心> ]\n[ <几何对象>, <度|弧度>, <旋转轴> ]\n[ <几何对象>, <度|弧度>, <轴上的点>, <轴方向或平面> ]
RotateText=旋转文本
RotateText.Syntax=[ "<文本>", <度|弧度> ]
Row=行序
Row.Syntax=[ <表格区单元格> ]
RunClickScript=运行单击脚本
RunClickScript.Syntax=[ <对象> ]
RunUpdateScript=运行更新脚本
RunUpdateScript.Syntax=[ <对象> ]
SD=标准差
SD.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SDX=横坐标标准差
SDX.Syntax=[ <点列> ]
SDY=纵坐标标准差
SDY.Syntax=[ <点列> ]
SVD=奇异值分解
SVD.Syntax=[ <矩阵> ]
SXX.Syntax=[ <数值列表> ]\n[ <点列> ]
SXY.Syntax=[ <点列> ]\n[ <数值列表1>, <数值列表2> ]
SYY.Syntax=[ <点列> ]
Sample=样本
Sample.Syntax=[ <列表>, <容量> ]\n[ <列表>, <容量>, <是否重复选择? true|false> ]
SampleSD=样本标准差
SampleSD.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SampleSD.SyntaxCAS=[ <数值列表> ]
SampleSDX=样本点横坐标标准差
SampleSDX.Syntax=[ <点列> ]
SampleSDY=样本点纵坐标标准差
SampleSDY.Syntax=[ <点列> ]
SampleVariance=样本方差
SampleVariance.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SampleVariance.SyntaxCAS=[ <数值列表> ]
ScientificText=科学记数法
ScientificText.Syntax=[ <数值> ]\n[ <数值>, <有效数字位数> ]
SecondAxis=副轴
SecondAxis.Syntax=[ <圆锥曲线> ]
SecondAxisLength=副半轴长
SecondAxisLength.Syntax=[ <圆锥曲线> ]
Sector=扇形
Sector.Syntax=[ <圆或椭圆>, <点1>, <点2> ]\n[ <圆或椭圆>, <参数值1 度|弧度>, <参数值2 度|弧度> ]
Segment=线段
Segment.Syntax=[ <点1>, <点2> ]\n[ <点>, <长度> ]
SelectObjects=选择
SelectObjects.Syntax=[ ]\n[ <对象1>, <对象2>, ... ]
SelectedElement=选定的元素
SelectedElement.Syntax=[ <下拉列表> ]
SelectedIndex=选定索引
SelectedIndex.Syntax=[ <下拉列表> ]
Semicircle=半圆
Semicircle.Syntax=[ <点1>, <点2> ]
Sequence=序列
Sequence.Syntax=[ <终止值> ]\n[ <起始值>, <终止值> ]\n[ <起始值>, <终止值>, <增量> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]\n[ <表达式>, <变量>, <起始值>, <终止值>, <增量> ]
SetActiveView=设置活动视图
SetActiveView.Syntax=[ <视图编号 1或"G"-绘图区|2或"D"-绘图区2|-1或"T"-3D绘图区|"A"-代数区|"S"-表格区|"C"-CAS> ]\n[ <平面> ]
SetAxesRatio=设置坐标轴比例
SetAxesRatio.Syntax=[ <数值1>, <数值2> ]
SetAxesRatio.Syntax3D=[ <数值1>, <数值2> ]\n[ <数值1>, <数值2>, <数值3> ]
SetBackgroundColor=设置背景颜色
SetBackgroundColor.Syntax=[ "<Color>" ]\n[ <对象>, "<Color>" ]\n[ <红色值 0~1>, <绿色值 0~1>, <蓝色值 0~1> ]\n[ <对象>, <红色值 0~1>, <绿色值 0~1>, <蓝色值 0~1> ]
SetCaption=设置标题
SetCaption.Syntax=[ <对象>, "<标题文本>" ]
SetColor=设置颜色
SetColor.Syntax=[ <对象>, "<Color>" ]\n[ <对象>, <红色值 0~1>, <绿色值 0~1>, <蓝色值 0~1> ]
SetConditionToShowObject=设置显示条件
SetConditionToShowObject.Syntax=[ <对象>, <条件> ]
SetConstructionStep=设置作图步骤
SetConstructionStep.Syntax=[ <数值> ]
SetCoords=设置坐标
SetCoords.Syntax=[ <对象>, <横坐标x>, <纵坐标y> ]\n[ <对象>, <横坐标x>, <纵坐标y>, <竖坐标z> ]
SetDecoration=设置标记
SetDecoration.Syntax=[ <线段|角|可填充对象>, <标记数字代码 0~6|7> ]
SetDynamicColor=设置动态颜色
SetDynamicColor.Syntax=[ <对象>, <红色值 0~1>, <绿色值 0~1>, <蓝色值 0~1> ]\n[ <对象>, <红色值 0~1>, <绿色值 0~1>, <蓝色值 0~1>, <虚实 0~1> ]
SetFilling=设置填充
SetFilling.Syntax=[ <对象>, <数字 0~1> ]
SetFixed=设置固定
SetFixed.Syntax=[ <对象>, <是否固定? true|false> ]\n[ <对象>, <是否固定? true|false>, <是否允许选定? true|false> ]
SetLabelMode=设置标签模式
SetLabelMode.Syntax=[ <对象>, <数值 0-名称|1-标题与数值|2-数值|3-标题> ]
SetLayer=设置图层
SetLayer.Syntax=[ <对象>, <图层编号 0~9> ]
SetLevelOfDetail=设置细节级别
SetLevelOfDetail.Syntax=[ <曲面>, <细节级别 0|1> ]
SetLineStyle=设置线型
SetLineStyle.Syntax=[ <直线|射线|线段>, <数字 0-实线|1-长划线|2-短划线|3-点|4-划线-点> ]
SetLineThickness=设置线径
SetLineThickness.Syntax=[ <直线|射线|线段>, <数值 1~13> ]
SetPerspective=设置格局
SetPerspective.Syntax=[ "<文本  A-代数区|B-概率统计|C-CAS|D-绘图区2|G-绘图区|L-作图过程|P-属性|R-数据分析|S-表格区|T-3D绘图区>" ]
SetPointSize=设置点径
SetPointSize.Syntax=[ <点|多边形|多面体|展开图>, <数字 0~9> ]
SetPointStyle=设置点型
SetPointStyle.Syntax=[ <点>, <数值 0-实心点|1-交叉形|2-空心点|3-十字形|4-实心菱形|5-空心菱形|6-上三角|7-下三角|8-右三角|9-左三角|10-实心点(无轮廓)> ]
SetSeed=设置种子
SetSeed.Syntax=[ <整数> ]
SetSpinSpeed=设置转速
SetSpinSpeed.Syntax=[ <速度值> ]
SetTooltipMode=设置工具提示模式
SetTooltipMode.Syntax=[ <对象>, <数值 0-自动|1-开启|2-关闭|3-标题|4-下一单元格> ]
SetTrace=设置跟踪
SetTrace.Syntax=[ <对象>, <是否跟踪? true|false> ]
SetValue=赋值
SetValue.Syntax=[ <布尔对象>, <0-false|1-true> ]\n[ <对象1>, <对象2> ]\n[ <列表>, <列表索引>, <对象> ]
SetViewDirection=设置视图方向
SetViewDirection.Syntax=[ ]\n[ <方向>, <是否动画演示? true|false> ]\n[ <方向, eg.(0, 0, 1)> ]
SetVisibleInView=设置可见性
SetVisibleInView.Syntax=[ <对象>, <视图编号 1-绘图区|2-绘图区2>, <true|false> ]
Shear=切变
Shear.Syntax=[ <几何对象>, <直线|射线|线段>, <比> ]
ShortestDistance=最短距离
ShortestDistance.Syntax=[ <线段列表>, <起始点>, <终止点>, <是否加权? true|false> ]
ShowAxes=显示坐标轴
ShowAxes.Syntax=[ ]\n[ <true|false> ]\n[ <视图编号 1-绘图区|2-绘图区2|3-3D绘图区>, <true|false> ]
ShowGrid=显示网格
ShowGrid.Syntax=[ ]\n[ <true|false> ]\n[ <视图编号 1-绘图区|2-绘图区2|3-3D绘图区>, <true|false> ]
ShowLabel=显示标签
ShowLabel.Syntax=[ <对象>, <true|false> ]
ShowLayer=显示图层
ShowLayer.Syntax=[ <数值 0~9> ]
Shuffle=随机排列
Shuffle.Syntax=[ <列表> ]
SigmaXX.Syntax=[ <点列> ]\n[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
SigmaXY.Syntax=[ <点列> ]\n[ <x坐标列表>, <y坐标列表> ]
SigmaYY.Syntax=[ <点列> ]
Simplify=化简
Simplify.Syntax=[ <函数> ]\n[ "<文本>" ]
Simplify.SyntaxCAS=[ <函数> ]
Slider=滑动条
Slider.Syntax=[ <最小值>, <最大值>, <增量>, <速度>, <宽度(px)>, <角度? true|false>, <水平? true|false>, <启动动画? true|false>, <随机? true|false> ]
Slope=斜率
Slope.Syntax=[ <直线|射线|线段> ]
SlopeField=斜率场
SlopeField.Syntax=[ <f(x, y)> ]\n[ <f(x, y)>, <数值 n> ]\n[ <f(x, y)>, <数值 n>, <长度倍增器a> ]\n[ <f(x, y)>, <数值 n>, <长度倍增器a>, <x最小值>, <y最小值>, <x最大值>, <y最大值> ]
SlowPlot=缓慢绘制
SlowPlot.Syntax=[ <函数> ]\n[ <函数>, <是否重复? true|false> ]
Solutions=解集
Solutions.Syntax=[ <方程> ]
Solutions.SyntaxCAS=[ <方程> ]\n[ <方程>, <变量> ]\n[ <方程列表>, <变量列表> ]
Solve=精确解
Solve.Syntax=[ <方程> ]
Solve.SyntaxCAS=[ <关于 x 的方程> ]\n[ <方程>, <变量> ]\n[ <方程列表>, <变量列表> ]\n[ <参数方程列表>, <​变量列表> ]\n[ <​方程>, <​变量>, <假设列表> ]
SolveCubic=解三次多项式
SolveCubic.SyntaxCAS=[ <三次多项式> ]
SolveODE=解常微分方程
SolveODE.Syntax=[ <f'(x, y)> ]\n[ <f'(x, y)>, <f上的点> ]\n[ <f'(x, y)>, <起始 x>, <起始y>, <终止x>, <步长> ]\n[ <y'>, <x'>, <起始 x>, <起始y>, <终止t>, <步长> ]\n[ <b(x)>, <c(x)>, <f(x)>, <起始x>, <起始y>, <起始y'>, <终止x>, <步长> ]
SolveODE.SyntaxCAS=[ <方程> ]\n[ <方程>, <f上的点> ]\n[ <方程>, <f上的点>, <f'上的点> ]\n[ <方程>, <因变量>, <自变量>, <f上的点> ]\n[ <方程>, <因变量>, <自变量>, <f上的点>, <f'上的点> ]
SolveQuartic=解四次多项式
SolveQuartic.SyntaxCAS=[ <四次多项式> ]
Sort=升序排列
Sort.Syntax=[ <列表> ]\n[ <数值列表>, <关键字列表> ]
Spearman=Spearman秩相关系数
Spearman.Syntax=[ <点列> ]\n[ <数值列表1>, <数值列表2> ]
Sphere=球面
Sphere.Syntax=[ <球心>, <半径> ]\n[ <球心>, <球面上一点> ]
Spline=样条曲线
Spline.Syntax=[ <点列> ]\n[ <点列>, <阶数 ≥ 3> ]\n[ <点列>, <阶数 ≥ 3>, <权重函数> ]
Split=拆分
Split.Syntax=[ "<文本>", <要拆分的文本列表> ]
StartAnimation=启动动画
StartAnimation.Syntax=[ ]\n[ <true|false> ]\n[ <滑动条|点>, <滑动条|点>, ... ]\n[ <滑动条|点>, <滑动条|点>, ..., <true|false> ]
StartRecord=开始记录
StartRecord.Syntax=[ ]\n[ <true|false> ]
StemPlot=茎叶图
StemPlot.Syntax=[ <列表> ]\n[ <列表>, <调节 -1-默认茎单位除以10|0-没变化|1-默认茎单位乘以10> ]
StepGraph=阶梯图
StepGraph.Syntax=[ <点列> ]\n[ <点列>, <是否连接? true|false> ]\n[ <x坐标列表>, <y坐标列表> ]\n[ <x坐标列表>, <y坐标列表>, <是否连接? true|false> ]\n[ <点列>, <是否连接? true|false>, <点型  0-不画点|1-实心点在右侧|2-实心点在右侧, 空心点在左侧|-1-实心点在左侧|-2-实心点在左侧, 空心点在右侧> ]\n[ <x坐标列表>, <y坐标列表>, <是否连接? true|false>, <点型  0-不画点|1-实心点在右侧|2-实心点在右侧, 空心点在左侧|-1-实心点在左侧|-2-实心点在左侧, 空心点在右侧> ]
StickGraph=棒图
StickGraph.Syntax=[ <点列> ]\n[ <点列>, <是否水平? true|false> ]\n[ <x坐标列表>, <y坐标列表> ]\n[ <x坐标列表>, <y坐标列表>, <是否水平? true|false> ]
Stretch=伸缩
Stretch.Syntax=[ <几何对象>, <向量> ]\n[ <几何对象>, <直线|射线|线段>, <比> ]
Substitute=替换
Substitute.SyntaxCAS=[ <表达式 eg. x+y>, <赋值列表 {x=1, y=2}> ]\n[ <表达式>, <被替换对象>, <替换对象> ]
Sum=总和
Sum.Syntax=[ <列表> ]\n[ <列表>, <前若干元素数量> ]\n[ <列表>, <频数列表> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
Sum.SyntaxCAS=[ <列表> ]\n[ <表达式>, <变量>, <起始值>, <终止值> ]
SumSquaredErrors=误差平方和
SumSquaredErrors.Syntax=[ <点列>, <函数> ]
SurdText=根式文本
SurdText.Syntax=[ <点> ]\n[ <数值> ]\n[ <数值>, <列表> ]
Surface=曲面
Surface.Syntax=[ <函数>, <围绕x轴旋转的角度 度|弧度> ]\n[ <曲线>, <围绕轴线旋转的角度 度|弧度>, <旋转轴 线段|射线|直线> ]\n[ <x表达式>, <y表达式>, <z表达式>, <参变量1>, <起始值>, <终止值>, <参变量2>, <起始值>, <终止值> ]
TDistribution=t分布
TDistribution.Syntax=[ <自由度>, <变量值> ]\n[ <自由度>, <变量值>, <是否累积? true|false> ]\n[ <自由度>, x, <是否累积? true|false> ]
TDistribution.SyntaxCAS=[ <自由度>, <变量值> ]
TMean2Estimate=双样本均值t估计
TMean2Estimate.Syntax=[ <样本数据1列表>, <样本数据2列表>, <置信水平>, <是否合并? true|false> ]\n[ <样本1平均数>, <样本1标准差>, <样本1容量>, <样本2平均数>, <样本2标准差>, <样本2容量>, <置信水平>, <是否合并? true|false> ]
TMeanEstimate=单均值t估计
TMeanEstimate.Syntax=[ <样本数据列表>, <置信水平> ]\n[ <样本平均数>, <样本标准差>, <样本容量>, <置信水平> ]
TTest=t检验
TTest.Syntax=[ <样本数据列表>, <假设平均数>, <尾部 "＜"-总体均值小于假设平均数|"＞"-总体均值大于假设平均数|"≠"-总体均值不等于假设平均数> ]\n[ <样本平均数>, <样本标准差>, <样本容量>, <假设平均数>, <尾部 "＜"-总体均值小于假设平均数|"＞"-总体均值大于假设平均数|"≠"-总体均值不等于假设平均数> ]
TTest2=双总体t检验
TTest2.Syntax=[ <样本数据1列表>, <样本数据2列表>, <尾部 "＜"-总体均值之差小于0|"＞"-总体均值之差大于0|"≠"-总体均值之差不等于0>, <是否合并? true|false> ]\n[ <样本1平均数>, <样本1标准差>, <样本1容量>, <样本2平均数>, <样本2标准差>, <样本2容量>, <尾部 "＜"-总体均值之差小于0|"＞"-总体均值之差大于0|"≠"-总体均值之差不等于0>, <是否合并? true|false> ]
TTestPaired=配对样本t检验
TTestPaired.Syntax=[ <样本数据1列表>, <样本数据2列表>, <尾部 "＜"-μ＜0|"＞"-μ＞0|"≠"-μ≠0 (μ为总体的平均配对差异)> ]
TableText=表格文本
TableText.Syntax=[ <列表1>, <列表2>, ... ]\n[ <列表1>, <列表2>, ..., <对齐方式 "v"-垂直|"h"-水平|"l"-左对齐|"r"-右对齐|"c"-居中|...> ]
Take=提取
Take.Syntax=[ <列表>, <起始位置> ]\n[ "<文本>", <起始位置> ]\n[ <列表>, <起始位置>, <终止位置> ]\n[ "<文本>", <起始位置>, <终止位置> ]
Take.SyntaxCAS=[ <列表>, <起始位置> ]\n[ <列表>, <起始位置>, <终止位置> ]
Tangent=切线
Tangent.Syntax=[ <点>, <圆锥曲线> ]\n[ <点>, <函数> ]\n[ <曲线上的点>, <曲线> ]\n[ <横坐标x值>, <函数> ]\n[ <直线>, <圆锥曲线> ]\n[ <圆锥曲线1>, <圆锥曲线2> ]
Tangent.SyntaxCAS=[ <数值>, <函数> ]\n[ <点>, <对象> ]
TaylorSeries=泰勒公式
TaylorSeries.Syntax=[ <函数>, <横坐标x值>, <阶数> ]
TaylorSeries.SyntaxCAS=[ <表达式>, <横坐标x值>, <阶数> ]\n[ <表达式>, <变量>, <变量值>, <阶数> ]
Tetrahedron=正四面体
Tetrahedron.Syntax=[ <等边三角形> ]\n[ <点1>, <点2>, <点3> ]\n[ <点1>, <点2>, <垂直于线段"点1点2"的向量|线段|射线|直线; 或者平行于线段"点1点2"的多边形|平面> ]
Text=文本
Text.Syntax=[ <对象> ]\n[ <对象>, <是否替换变量? true|false> ]\n[ <对象>, <点> ]\n[ <对象>, <点>, <是否替换变量? true|false> ]\n[ <对象>, <点>, <是否替换变量? true|false>, <是否应用 LaTeX 公式? true|false> ]
TextToUnicode=文本转换为统一码
TextToUnicode.Syntax=[ "<文本>" ]
Textfield=输入框
Textfield.Syntax=[ <链接对象> ]
TiedRank=平秩列表
TiedRank.Syntax=[ <列表> ]
ToBase=转换进制
ToBase.Syntax=[ <十进制数值>, <目标进制(基数) 2~36> ]
ToComplex=转换为复数
ToComplex.Syntax=[ <向量> ]
ToExponential=转换为指数形式
ToExponential.SyntaxCAS=[ <复数> ]
ToPoint=转换为点
ToPoint.Syntax=[ <复数> ]
ToPolar=转换为极坐标形式
ToPolar.Syntax=[ <复数> ]\n[ <向量> ]
ToolImage=工具图标
ToolImage.Syntax=[ <数值 0~73及5XX和20XX> ]\n[ <数值>, <点> ]\n[ <数值>, <点1>, <点2> ]
Top=上底
Top.Syntax=[ <二次曲面> ]
Translate=平移
Translate.Syntax=[ <几何对象>, <向量> ]\n[ <向量>, <起点> ]
Transpose=转置
Transpose.Syntax=[ <矩阵> ]
TrapezoidalSum=梯形法则
TrapezoidalSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <梯形数量> ]
TravelingSalesman=旅行商问题
TravelingSalesman.Syntax=[ <点列> ]
TriangleCenter=三角形中心
TriangleCenter.Syntax=[ <点1>, <点2>, <点3>, <数值 1-内心|2-重心|3-外心|4-垂心|5-九点中心|6-陪位重心|7-热尔岗点|8-奈格尔点|13-费马点> ]
TriangleCurve=三角曲线
TriangleCurve.Syntax=[ <点1>, <点2>, <点3>, <方程> ]
Triangular=三角形分布
Triangular.Syntax=[ <下界>, <上界>, <模式>, <变量值> ]\n[ <下界>, <上界>, <模式>, <变量值>, <是否累积? true|false> ]\n[ <下界>, <上界>, <模式>, x, <是否累积? true|false> ]
TrigCombine=三角式合并
TrigCombine.Syntax=[ <表达式> ]\n[ <表达式>, <目标函数> ]
TrigExpand=三角式展开
TrigExpand.Syntax=[ <表达式> ]\n[ <表达式>, <目标函数> ]
TrigExpand.SyntaxCAS=[ <表达式> ]\n[ <表达式>, <目标函数> ]\n[ <表达式>, <目标函数>, <目标变量> ]\n[ <表达式>, <目标函数>, <目标变量1>, <目标变量2> ]
TrigSimplify=三角式化简
TrigSimplify.Syntax=[ <表达式> ]
Trilinear=三线坐标点
Trilinear.Syntax=[ <点A>, <点B>, <点C>, <数值a>, <数值b>, <数值c> ]
TurningPoint=拐点
TurningPoint.Syntax=[ <多项式> ]
Turtle=海龟
Turtle.Syntax=[ ]
TurtleBack=后退
TurtleBack.Syntax=[ <海龟>, <路程> ]
TurtleDown=落笔
TurtleDown.Syntax=[ <海龟> ]
TurtleForward=前进
TurtleForward.Syntax=[ <海龟>, <路程> ]
TurtleLeft=左转
TurtleLeft.Syntax=[ <海龟>, <度|弧度> ]
TurtleRight=右转
TurtleRight.Syntax=[ <海龟>, <度|弧度> ]
TurtleUp=抬笔
TurtleUp.Syntax=[ <海龟> ]
UnicodeToLetter=统一码转换为字母
UnicodeToLetter.Syntax=[ <整数> ]
UnicodeToText=统一码转换为文本
UnicodeToText.Syntax=[ <统一字符编码整数列表> ]
Uniform=均匀分布
Uniform.Syntax=[ <下界>, <上界>, <变量值> ]\n[ <下界>, <上界>, <变量值>, <是否累积? true|false> ]\n[ <下界>, <上界>, x, <是否累积? true|false> ]
Union=并集
Union.Syntax=[ <列表1>, <列表2> ]\n[ <多边形1>, <多边形2> ]
Unique=互异
Unique.Syntax=[ <列表> ]
UnitOrthogonalVector=单位法向量
UnitOrthogonalVector.Syntax=[ <直线|射线> ]\n[ <线段> ]\n[ <向量> ]
UnitOrthogonalVector.Syntax3D=[ <直线|射线> ]\n[ <线段> ]\n[ <向量> ]\n[ <平面> ]
UnitOrthogonalVector.SyntaxCAS=[ <向量> ]
UnitVector=单位向量
UnitVector.Syntax=[ <几何对象> ]
UnitVector.SyntaxCAS=[ <向量> ]
UpdateConstruction=更新作图
UpdateConstruction.Syntax=[ ]\n[ <更新次数> ]
UpperSum=上和
UpperSum.Syntax=[ <函数>, <x-起始值>, <x-终止值>, <矩形数量> ]
Variance=方差
Variance.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
Variance.SyntaxCAS=[ <数值列表> ]
Vector=向量
Vector.Syntax=[ <终点(原点为起点)> ]\n[ <起点>, <终点> ]
Vertex=顶点
Vertex.Syntax=[ <圆锥曲线> ]\n[ <不等式> ]\n[ <多边形> ]\n[ <多边形>, <索引> ]\n[ <线段>, <索引> ]
VerticalText=竖排文本
VerticalText.Syntax=[ "<文本>" ]\n[ "<文本>", <点> ]
Volume=体积
Volume.Syntax=[ <立体图形> ]
Voronoi=Voronoi图
Voronoi.Syntax=[ <点列> ]
Weibull=威布尔分布
Weibull.Syntax=[ <形状参数k>, <尺度参数λ>, <变量值> ]\n[ <形状参数k>, <尺度参数λ>, <变量值>, <是否累积? true|false> ]\n[ <形状参数k>, <尺度参数λ>, x, <是否累积? true|false> ]
Weibull.SyntaxCAS=[ <形状参数k>, <尺度参数λ>, <变量值> ]
ZMean2Estimate=双样本均值z估计
ZMean2Estimate.Syntax=[ <样本数据1列表>, <样本数据2列表>, <标准差1>, <标准差2>, <置信水平> ]\n[ <样本1平均数>, <标准差1>, <样本1容量>, <样本2平均数>, <标准差2>, <样本2容量>, <置信水平> ]
ZMean2Test=双样本均值z检验
ZMean2Test.Syntax=[ <样本数据1列表>, <标准差1>, <样本数据2列表>, <标准差2>, <尾部 "＜"-总体均值之差小于0|"＞"-总体均值之差大于0|"≠"-总体均值之差不等于0> ]\n[ <样本1平均数>, <标准差1>, <样本1容量>, <样本2平均数>, <标准差2>, <样本2容量>, <尾部 "＜"-总体均值之差小于0|"＞"-总体均值之差大于0|"≠"-总体均值之差不等于0> ]
ZMeanEstimate=单均值z估计
ZMeanEstimate.Syntax=[ <样本数据列表>, <标准差>, <置信水平> ]\n[ <样本平均数>, <标准差>, <样本容量>, <置信水平> ]
ZMeanTest=单均值z检验
ZMeanTest.Syntax=[ <样本数据列表>, <标准差>, <假设均值>, <尾部 "＜"-总体均值小于假设均值|"＞"-总体均值大于假设均值|"≠"-总体均值不等于假设均值> ]\n[ <样本平均数>, <标准差>, <样本容量>, <假设均值>, <尾部 "＜"-总体均值小于假设均值|"＞"-总体均值大于假设均值|"≠"-总体均值不等于假设均值> ]
ZProportion2Estimate=双样本比例z估计
ZProportion2Estimate.Syntax=[ <样本比例1>, <样本容量1>, <样本比例2>, <样本容量2>, <置信水平> ]
ZProportion2Test=双样本比例z检验
ZProportion2Test.Syntax=[ <样本比例1>, <样本容量1>, <样本比例2>, <样本容量2>, <尾部 "＜"-总体比例之差小于0|"＞"-总体比例之差大于0|"≠"-总体比例之差不等于0> ]
ZProportionEstimate=单比例z估计
ZProportionEstimate.Syntax=[ <样本比例>, <样本容量>, <置信水平> ]
ZProportionTest=单比例z检验
ZProportionTest.Syntax=[ <样本比例>, <样本容量>, <假设比例>, <尾部 "＜"-总体比例小于假设比例|"＞"-总体比例大于假设比例|"≠"-总体比例不等于假设比例> ]
Zip=映射
Zip.Syntax=[ <表达式>, <变量1>, <列表1>, <变量2>, <列表2>, ... ]
Zipf=齐普夫分布
Zipf.Syntax=[ <元素数量>, <指数> ]\n[ <元素数量>, <指数>, <是否累积? true|false> ]\n[ <元素数量>, <指数>, <变量值>, <是否累积? true|false> ]
Zipf.SyntaxCAS=[ <元素数量>, <指数>, <变量值>, <是否累积? true|false> ]
ZoomIn=放大
ZoomIn.Syntax=[ <缩放因子> ]\n[ <缩放因子>, <中心点)> ]\n[ <x最小值>, <y最小值>, <x最大值>, <y最大值> ]
ZoomOut=缩小
ZoomOut.Syntax=[ <缩放因子> ]\n[ <缩放因子>, <中心点> ]
mad.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
mean.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
mean.SyntaxCAS=[ <数值列表> ]
nCr=组合数
nCr.Syntax=[ <数值 n>, <数值 r> ]
stdev.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
stdevp.Syntax=[ <原始数据列表> ]\n[ <数值列表>, <频数列表> ]
stdevp.SyntaxCAS=[ <数值列表> ]