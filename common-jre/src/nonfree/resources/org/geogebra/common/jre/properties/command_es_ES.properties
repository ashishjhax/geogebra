# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
Angle.Syntax=[ <Objeto> ]\n[ <Vector>, <Vector> ]\n[ <Recta>, <Recta> ]\n[ <Punto inicial>, <Vértice>, <Punto final (en sentido antihorario)> ]\n[ <Punto inicial>, <Vértice>, <Ángulo de rotación (en sentido antihorario)> ]
Angle.Syntax3D=[ <Objeto> ]\n[ <Vector>, <Vector> ]\n[ <Recta>, <Recta> ]\n[ <Recta>, <Plano> ]\n[ <Plano>, <Plano> ]\n[ <Punto (lateral)>, <Vértice>, <Punto (lateral antihorario)> ]\n[ <Punto (lateral)>, <Vértice>, <Ángulo (de rotación antihoraria)> ]\n[ <Punto>, <Punto>, <Punto>, <Dirección> ]
AngularBisector.Syntax=[ <Recta>, <Recta> ]\n[ <Punto inicial>, <Vértice>, <Punto final (en sentido antihorario)> ]
Area.Syntax=[ <Cónica> ]\n[ <Polígono> ]\n[ <Punto inicial (vértice)>, ..., <Punto final (vértice)> ]
Asymptote.Syntax=[ <Cónica, Función o Curva implícita> ]
BarChart.Syntax=[ <Lista de datos>, <Lista de frecuencias> ]\n[ <Lista de datos brutos>, <Ancho de barras>, <Factor de escala vertical(opcional)> ]\n[ <Lista de datos>, <Lista de frecuencias>, <Ancho de barras> ]\n[ <Valor inicial>, <Valor final>, <Lista de alturas> ]\n[ <Valor inicial>, <Valor final>, <Expresión>, <Variable>, <Del número>, <Al número> ]\n[ <Valor inicial>, <Valor final>, <Expresión>, <Variable>, <Del número>, <Al número>, <Paso> ]
Bernoulli.Syntax=[ <Probabilidad>, <Acumulada o no (true/false)> ]
Binomial.Syntax=[ <Número n>, <Número r> ]
BinomialDist.Syntax=[ <Número de ensayos>, <Probabilidad de éxito> ]\n[ <Número de ensayos>, <Probabilidad de éxito>, <Acumulada o no (true/false)> ]\n[ <Número de ensayos>, <Probabilidad de éxito>, <Valor>, <Acumulada  o no (true/false)> ]
BinomialDist.SyntaxCAS=[ <Número de ensayos>, <Probabilidad de éxito>, <Valor de variable>, <Acumulada o no (true/false)> ]
BoxPlot.Syntax=[ <Offset_y>, <Escala_y>, <Lista de datos brutos> ]\n[ <Offset_y>, <Escala_y>, <Lista de datos brutos>, <Atipicidades o no (true/false)> ]\n[ <Offset_y>, <Escala_y>, <Lista de datos>, <Lista de frecuencias>, <Atipicidades o no (true/false)> ]\n[ <Offset_y>, <Escala_y>, <Valor_Inicial>, <Q1>, <Mediana>, <Q3>, <Valor Final> ]
Button.Syntax=[ ]\n[ <Texto> ]
CFactor=FactorizaC
CSolutions.SyntaxCAS=[ <Ecuación> ]\n[ <Ecuación>, <Variable> ]\n[ <Lista de Ecuaciones>, <Lista de Variables> ]
CSolve=ResuelveC
Checkbox.Syntax=[ ]\n[ <Texto> ]\n[ <Lista> ]\n[ <Texto>, <Lista> ]
Circle.Syntax=[ <Punto (centro)>, <Número(radio)> ]\n[ <Punto>, <Segmento> ]\n[ <Punto (centro)>, <Punto> ]\n[ <Punto>, <Punto>, <Punto> ]
Circle.Syntax3D=[ <Punto (centro)>, <Número (radio)> ]\n[ <Punto (centro)>, <Segmento (radio)> ]\n[ <Punto (centro)>, <Punto> ]\n[ <Recta (eje)>, <Punto> ]\n[ <Punto>, <Punto>, <Punto> ]\n[ <Punto (centro)>, <Radio>, <Dirección> ]\n[ <Punto (centro)>, <Punto>, <Dirección> ]
Circumference.Syntax=[ <Polígono o Cónica> ]
ClosestPoint.Syntax=[ <Recorrido o Región>, <Punto> ]\n[ <Recta>, <Recta> ]
Column.Syntax=[ <Celda de la Hoja de Cálculo> ]
CompleteSquare.Syntax=[ <Función Cuadrática> ]
ComplexRoot=RaízC
Conic.Syntax=[ <Lista> ]\n[ <Punto>, <Punto>, <Punto>, <Punto>, <Punto> ]\n[ <Número>, <Número>, <Número>, <Número>, <Número>, <Número> ]
ContinuedFraction.Syntax=[ <Número> ]\n[ <Número>, <Nivel> ]\n[ <Número>, <Nivel>, <Abreviado o no (true/false)> ]
ConvexHull=CierreConvexo
ConvexHull.Syntax=[ <Lista de Puntos> ]
Corner.Syntax=[ <Número de esquina> ]\n[ <Imagen>, <Número de esquina> ]\n[ <Texto>, <Número de esquina> ]\n[ <Vista Gráfica>, <Número de esquina> ]
Cubic.Syntax=[ <Punto>, <Punto>, <Punto>, <Número> ]
Curvature.Syntax=[ <Punto>, <Objeto (función, curva)> ]
CurvatureVector.Syntax=[ <Punto>, <Objeto (función, curva)> ]
DelauneyTriangulation.Syntax=[ <Lista de puntos> ]
Diameter.Syntax=[ <Vector>, <Cónica> ]\n[ <Recta (dirección)>, <Cónica> ]
Dilate.Syntax=[ <Objeto>, <Número (factor de escala)> ]\n[ <Objeto>, <Número (factor de escala)>, <Punto (centro)> ]
Direction.Syntax=[ <Recta> ]
Distance.Syntax=[ <Punto>, <Objeto> ]\n[ <Recta>, <Recta> ]
DynamicCoordinates.Syntax=[ <Punto>, <Coordenada x>, <Coordenada y> ]\n[ <Punto>, <Coordenada x>, <Coordenada y>, <Coordenada z> ]
Eigenvalues=Autovalores
Eigenvectors=Autovectores
Element.Syntax=[ <Lista>, <Número (posición)> ]\n[ <Matriz>, <Fila>, <Columna> ]\n[ <Lista>, <Índice 1>, <Índice 2>, ... ]
Element.SyntaxCAS=[ <Lista>, <Número (posición)> ]\n[ <Matriz>, <Fila>, <Columna> ]
Erlang.Syntax=[ <Figura>, <Razón>, <Valor de la variable> ]\n[ <Figura>, <Razón>, <Valor de la variable>, <Acumulada o no (true/false)> ]\n[ <Figura>, <Razón>, x, <Acumulada o no (true/false)> ]
FitPoly.Syntax=[ <Lista de puntos>, <Grado del polinomio> ]\n[ <Función mano alzada>, <Grado del polinomio> ]
Frequency.Syntax=[ <Lista de datos brutos> ]\n[ <Acumulada o no (true/false)>, <Lista de datos brutos> ]\n[ <Lista de límites de clases>, <Lista de datos brutos> ]\n[ <Lista de textos>, <Lista de textos> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clases>, <Lista de datos brutos> ]\n[ <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]
FrequencyPolygon.Syntax=[ <Lista de límites de clases>, <Lista de alturas> ]\n[ <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]
FrequencyTable.Syntax=[ <Lista de datos brutos>, <Factor de escala (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de datos brutos> ]\n[ <Lista de Límites de Clase>, <Lista de datos brutos> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clase>, <Lista de datos brutos> ]\n[ <Lista de límites de clase>, <Lista de datos brutos>, <Densidad>, <Factor de escala de densidad (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clase>, <Lista de datos brutos>, <Densidad>, <Factor de escala de densidad (opcional)> ]
Function.Syntax3D=[ <Lista de números> ]\n[ <Función>, <Valor inicial>, <Valor final> ]\n[ <Expresión>, <Variable 1>, <Valor inicial>, <Valor final>, <Variable 2>, <Valor inicial>, <Valor final> ]
Gamma.Syntax=[ <Alfa>, <Beta>, <Valor> ]\n[ <Alfa>, <Beta>, <Valor de la variable>, <Acumulada o no (true/false)> ]\n[ <Alfa>, <Beta>, x, <Acumulada o no (true/false)> ]
Height.Syntax=[ <Sólido> ]
Histogram.Syntax=[ <Lista de límites de clases>, <Lista de alturas> ]\n[ <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]
HistogramRight.Syntax=[ <Lista de límites de clases>, <Lista de alturas> ]\n[ <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]\n[ <Acumulada o no (true/false)>, <Lista de límites de clases>, <Lista de datos brutos>, <Usar densidad o no (true/false)>, <Factor de escala de densidad (opcional)> ]
HyperGeometric.Syntax=[ <Tamaño de población>, <Número de éxitos>, <Tamaño de muestra> ]\n[ <Tamaño de población>, <Número de éxitos>, <Tamaño de muestra>, <Acumulada o no (true/false)> ]\n[ <Tamaño de población>, <Número de éxitos>, <Tamaño de muestra>, <Valor>, <Acumulada o no (true/false)> ]
HyperGeometric.SyntaxCAS=[ <Tamaño de población>, <Número de éxitos>, <Tamaño de muestra>, <Valor>, <Acumulada o no (true/false)> ]
IntegralBetween.Syntax=[ <Función>, <Función>, <Extremo inferior del intervalo>, <Extremo superior del intervalo> ]\n[ <Función>, <Función>, <Extremo inferior del intervalo>, <Extremo superior del intervalo>, <Evaluar o no (true/false)> ]
IntersectConic=CónicaIntersección
IntersectPath.Syntax=[ <Polígono>, <Polígono o Cónica> ]\n[ <Recta>, <Polígono o Cónica> ]
IntersectPath.Syntax3D=[ <Recta>, <Polígono o Cónica> ]\n[ <Polígono>, <Polígono o Cónica> ]\n[ <Plano>, <Polígono> ]\n[ <Plano>, <Cuádrica> ]
InversePascal.Syntax=[ <Número de éxitos>, <Probabilidad de éxito>, <Probabilidad> ]
IsInteger.Syntax=[ <Número> ]
Iteration.Syntax=[ <Función>, <Valor inicial>, <Número de iteraciones> ]\n[ <Expresión>, <Variables>, <{Valores iniciales}>, <Número de iteraciones> ]
IterationList.Syntax=[ <Función>, <Valor inicial>, <Número de iteraciones> ]\n[ <Expresión>, <Variables>, <{Valores iniciales}>, <Número de iteraciones> ]
JordanDiagonalization=CanónicaJordan
LCM.Syntax=[ <Lista de números> ]\n[ <Número>, <Número> ]
LCM.SyntaxCAS=[ <Lista de números> ]\n[ <Lista de polinomios> ]\n[ <Número>, <Número> ]\n[ <Polinomio>, <Polinomio> ]
LaTeX.Syntax=[ <Objeto> ]\n[ <Objeto>, <Sustituye o no las variables (true/false)> ]\n[ <Objeto>, <Sustituye o no las variables (true/false)>, <Muestra o no el nombre (true/false)> ]
Last.Syntax=[ <Lista> ]\n[ <Texto> ]\n[ <Lista>, <Número de elementos> ]\n[ <Texto>, <Número de elementos> ]
Last.SyntaxCAS=[ <Lista> ]\n[ <Lista>, <Número de elementos> ]
Length.SyntaxCAS=[ <Lista> ]\n[ <Función o Curva>, <Extremo inferior del intervalo>, <Extremo superior del intervalo> ]\n[ <Función o Curva>, <Variable>, <Punto Inicial>, <Punto Final> ]
LineBisector.Syntax3D=[ <Segmento> ]\n[ <Punto>, <Punto> ]\n[ <Punto>, <Punto>, <Dirección (plano o vector normal> ]
Locus.Syntax=[ <Punto que trazará el lugar>, <Punto> ]\n[ <Punto que trazará el lugar>, <Deslizador> ]\n[ <Campode direcciones>, <Punto> ]\n[ <f(x, y)>, <Punto> ]
LocusEquation.Syntax=[ <Lugar geométrico> ]\n[ <Punto del lugar>, <Punto variable> ]\n[ <Expresión lógica>, <Punto libre> ]
LogNormal.Syntax=[ <Media>, <Desviación estándar>, <Valor> ]\n[ <Media>, <Desviación estándar>, <Valor de la variable>, <Acumulada o no (true/false)> ]\n[ <Media>, <Desviación estándar>, x, <Acumulada o no (true/false)> ]
Logistic.Syntax=[ <Media>, <Escala>, <Valor de la variable> ]\n[ <Media>, <Escala>, <Valor de la variable>, <Acumulada o no (true/false)> ]\n[ <Media>, <Escala>, x, <Acumulada o no (true/false)> ]
MAD.Syntax=[ <Lista de datos brutos> ]\n[ <Lista de números>, <Lista de frecuencias> ]
Maximize.Syntax=[ <Número dependiente>, <Número libre> ]\n[ <Número dependiente>, <Punto en el recorrido> ]
Minimize.Syntax=[ <Número dependiente>, <Número libre> ]\n[ <Número dependiente>, <Punto en el recorrido> ]
Mod.Syntax=[ <Número (dividendo)>, <Número (divisor)> ]\n[ <Polinomio (dividendo)>, <Polinomio (divisor)> ]
NIntegral.Syntax=[ <Función> ]\n[ <Función>, <Valor inicial de x>, <Valor final de x> ]
NSolve=ResuelveN
OrthogonalLine.Syntax3D=[ <Punto>, <Recta> ]\n[ <Punto>, <Segmento> ]\n[ <Punto>, <Vector> ]\n[ <Punto>, <Plano> ]\n[ <Recta>, <Recta> ]\n[ <Punto>, <Dirección>, <Dirección> ]\n[ <Punto>, <Recta>, <Contexto: un plano (ej. planoXY) o la palabra "espacio" (sin comillas)> ]
OrthogonalVector.Syntax=[ <Recta> ]\n[ <Segmento> ]\n[ <Vector> ]
OsculatingCircle.Syntax=[ <Punto>, <Objeto (función, curva)> ]
Parabola.Syntax=[ <Punto (foco)>, <Recta (directriz)> ]
ParseToFunction.Syntax=[ <Nombre de función>, <Expresión (texto)> ]
Pascal.Syntax=[ <Número de éxitos>, <Probabilidad de éxito> ]\n[ <Número de éxitos>, <Probabilidad de éxito>, <Acumulada o no (true/false)> ]\n[ <Número de éxitos>, <Probabilidad de éxito>, <Valor>, <Acumulada o no (true/false)> ]
Pascal.SyntaxCAS=[ <Número de éxitos>, <Probabilidad de éxito>, <Valor>, <Acumulada o no (true/false)> ]
Payment.Syntax=[ <Tasa>, <Número de períodos>, <Valor actual>, <Valor futuro(opcional)>, <Tipo (opcional)> ]
Perimeter.Syntax=[ <Polígono> ]\n[ <Cônica> ]\n[ <Lugar geométrico> ]
Periods.Syntax=[ <Tasa>, <Pago>, <Valor actual>, <Valor futuro(opcional)>, <Tipo (opcional)> ]
PlaySound.Syntax=[ <Archivo> ]\n[ <Suena o no (true/false)> ]\n[ <Función>, <Valor mínimo>, <Valor máximo> ]\n[ <Función>, <Valor mínimo>, <Valor máximo>, <Frecuencia de muestreo>, <Profundidad de muestreo> ]
Poisson.SyntaxCAS=[ <Media>, <Valor>, <Acumulada o no (true/false)> ]
PresentValue.Syntax=[ <Tasa>, <Número de períodos>, <Pago>, <Valor futuro(opcional)>, <Tipo (opcional)> ]
Product.Syntax=[ <Lista de datos brutos> ]\n[ <Lista de números>, <Número de elementos> ]\n[ <Lista de números>, <Lista de frecuencias> ]\n[ <Expresión>, <Variable>, <Valor inicial>, <Valor final> ]
Prove.Syntax=[ <Expresión lógica> ]
Pyramid.Syntax=[ <Polígono>, <Punto> ]\n[ <Polígono>, <Número (altura)> ]\n[ <Punto>, <Punto>, <Punto>, <Punto>, ... ]
Q1=Q1
Q3=Q3
Random.Syntax=[ <Mínimo (entero)>, <Máximo (entero)> ]\n[ <Mínimo (entero)>, <Máximo (entero)>, <Fijo o no (true/false)> ]
Random.SyntaxCAS=[ <Mínimo (entero)>, <Máximo (entero)> ]
RandomBinomial=BinomialAleatoria
RandomNormal=NormalAleatoria
RandomPointIn.Syntax=[ <Polígono> ]\n[ <Lista de puntos> ]\n[ <xMín>, <xMáx>, <yMín>, <yMáx> ]
RandomPoisson=PoissonAleatoria
RandomUniform=UniformeAleatoria
Rate.Syntax=[ <Número de períodos>, <Pago>, <Valor actual>, <Valor futuro(opcional)>, <Tipo (opcional)>, <Estimación (opcional)> ]
Ray.Syntax=[ <Punto (extremo)>, <Punto> ]\n[ <Punto (extremo)>, <Vector director> ]
Rename.Syntax=[ <Objeto>, <Nombre (entre comillas)> ]
RigidPolygon.Syntax=[ <Polígono> ]\n[ <Polígono>, <Traslada x>, <Traslada y> ]\n[ <Punto libre>, ..., <Punto libre> ]
Row.Syntax=[ <Celda de la Hoja de Cálculo> ]
SD.Syntax=[ <Lista de datos brutos> ]\n[ <Lista de números>, <Lista de frecuencias> ]
Sample.Syntax=[ <Lista>, <Tamaño> ]\n[ <Lista>, <Tamaño>, <Con reemplazamiento o no (true/false)> ]
SetActiveView.Syntax=[ <Plano> ]\n[ <Vista (1, 2, -1, "A", "C" o "S")> ]
SetFilling=Sombreado
SetFixed.Syntax=[ <Objeto>, <Fijo o no (true/false)> ]\n[ <Objeto>, <Fijo o no (true/false)>, <Seleccionable (true/false)> ]
SetPointSize.Syntax=[ <Punto>, <Número> ]
SetTrace.Syntax=[ <Objeto>, <Deja rastro o no (true/false)> ]
SetValue.Syntax=[ <Valor lógico>, <true/false (ó 1/0)> ]\n[ <Objeto>, <Objeto> ]\n[ <Lista>, <Número>, <Objeto> ]
SetViewDirection.Syntax=[ ]\n[ <Dirección> ]\n[ <Dirección>, <Parámetro lógico> ]
SetVisibleInView.Syntax=[ <Objeto>, <Número de Vista (1 o 2)>, <Visible o no (true/false)> ]
Shear.Syntax=[ <Objeto>, <Recta>, <Razón> ]
ShortestDistance.Syntax=[ <Lista de segmentos>, <Punto inicial>, <Punto final>, <Baremado o no (true/false)> ]
ShowAxes.Syntax=[ ]\n[ <Mostrar o no (true/false)> ]\n[ <Vista (1, 2 o 3>, <Mostrar o no (true/false)> ]
ShowGrid.Syntax=[ ]\n[ <Mostrar o no (true/false)> ]\n[ <Vista 1|2|3>, <Mostrar o no (true/false)> ]
ShowLabel.Syntax=[ <Objeto>, <Mostrar o no (true/false)> ]
Slider.Syntax=[ <Mín>, <Máx>, <Incremento>, <Velocidad>, <Ancho>, <Ángulo o no (true/false)>, <Horizontal o no (true/false)>, <Animado o no (true/false)>, <Aleatorio o no (true/false)> ]
Slope.Syntax=[ <Recta> ]
SlowPlot=TrazadoLento
SlowPlot.Syntax=[ <Función> ]\n[ <Función>, <Repetir (true/false)> ]
Solve.SyntaxCAS=[ <Ecuación en x> ]\n[ <Ecuación>, <Variable> ]\n[ <Lista de ecuaciones>, <Lista de variables> ]\n[ <Lista de ecuaciones paramétricas>, <Lista de variables> ]\n[ <Ecuación>, <Variable>, <Lista de suposiciones> ]
SolveCubic=SolucionesCúbica
Sort.Syntax=[ <Lista> ]\n[ <Lista>, <Lista modelo> ]
Sphere.Syntax=[ <Punto>, <Radio> ]\n[ <Punto>, <Punto> ]
Spline.Syntax=[ <Lista de puntos> ]\n[ <Lista de puntos>, <Grado ≥ 3> ]\n[ <Lista de puntos>, <Grado ≥ 3>, <Función peso> ]
Split.Syntax=[ <Texto>, <Lista de textos para separar> ]
StartAnimation.Syntax=[ ]\n[ <Animado o no (true/false)> ]\n[ <Deslizador o punto>, <Deslizador o punto>, ... ]\n[ <Deslizador o punto>, <Deslizador o punto>, ..., <Animados o no (true/false)> ]
StemPlot.Syntax=[ <Lista> ]\n[ <Lista>, <Ajuste (-1, 0 o 1)> ]
StickGraph.Syntax=[ <Lista de puntos> ]\n[ <Lista de puntos>, <Horizontal o no (true/false)> ]\n[ <Lista de x>, <Lista de y> ]\n[ <Lista de x>, <Lista de y>, <Horizontal o no (true/false)> ]
Stretch.Syntax=[ <Objeto>, <Vector> ]\n[ <Objeto>, <Dirección>, <Razón> ]
Sum.Syntax=[ <Lista> ]\n[ <Lista>, <Número de elementos> ]\n[ <Lista>, <Lista de frecuencias> ]\n[ <Expresión>, <Variable>, <Valor inicial>, <Valor final> ]
TMean2Estimate.Syntax=[ <Lista de datos (muestra 1)>, <Lista de datos (muestra 2)>, <Nivel>, <Agrupado o no (true/false)> ]\n[ <Media (muestral 1)>, <Desviación estándar (muestral 1)>, <Tamaño (muestra 1)>, <Media (muestral 2)>, <Desviación estándar (muestral 2)>, <Tamaño (muestra 2)>, <Nivel>, <Agrupado o no (true/false)> ]
TTest2.Syntax=[ <Lista de datos (muestra 1)>, <Lista de datos (muestra 2)>, <Cola>, <Agrupado o no (true/false)> ]\n[ <Media (muestral 1)>, <Desviación estándar (muestra 1)>, <Tamaño (muestra 1)>, <Media (muestra 2)>, <Desviación estándar (muestra 2)>, <Tamaño (muestra 2)>, <Cola>, <Agrupado o no (true/false)> ]
Text.Syntax=[ <Objeto> ]\n[ <Objeto>, <Sustituye variables o no (true/false)> ]\n[ <Objeto>, <Punto> ]\n[ <Objeto>, <Punto>, <Sustituye variables o no (true/false)> ]\n[ <Objeto>, <Punto>, <Sustituye variables o no (true/false)>, <Fórmula LaTeX o no (true/false)> ]
Textfield.Syntax=[ <Objeto asociado> ]
UnicodeToLetter.Syntax=[ <Número entero (unicode)> ]
UnicodeToText.Syntax=[ <Lista de enteros (unicode)> ]
UnitOrthogonalVector.Syntax=[ <Recta> ]\n[ <Segmento> ]\n[ <Vector> ]
UnitOrthogonalVector.Syntax3D=[ <Recta> ]\n[ <Segmento> ]\n[ <Vector> ]\n[ <Plano> ]
Vertex.Syntax=[ <Cónica> ]\n[ <Sistema de inecuaciones> ]\n[ <Polígono> ]\n[ <Polígono>, <Número de vértice> ]\n[ <Segmento>, <Número de extremo> ]
Weibull.Syntax=[ <Figura>, <Escala>, <Valor de la variable> ]\n[ <Figura>, <Escala>, <Valor de la variable>, <Acumulada o no (true/false)> ]\n[ <Figura>, <Escala>, x, <Acumulada o no (true/false)> ]
Weibull.SyntaxCAS=[ <Figura>, <Escala>, <Valor> ]
Zip.Syntax=[ <Expresión>, <Variable 1>, <Lista 1>, <Variable 2>, <Lista 2>, ... ]
Zipf.Syntax=[ <Número de elementos>, <Exponente> ]\n[ <Número de elementos>, <Exponente>, <Acumulada o no (true/false)> ]\n[ <Número de elementos>, <Exponente>, <Valor>, <Acumulada o no (true/false)> ]
ZoomIn.Syntax=[ ]\n[ <Factor de escala> ]\n[ <Factor de escala>, <Punto (centro)> ]\n[ <Mín x>, <Mín y>, <Máx x>, <Máx y> ]\n[ <Mín x>, <Mín y>, <Mín z>, <Máx x>, <Máx y>, <Máx z> ]
ZoomOut.Syntax=[ <Factor de escala> ]\n[ <Factor de escala>, <Punto (centro)> ]
mad.Syntax=[ <Lista de datos brutos> ]\n[ <Lista de valores>, <Lista de frecuencias> ]
nCr.Syntax=[ <Número n>, <Número r> ]
stdev=dsvst
stdev.Syntax=[ <Lista de datos brutos> ]\n[ <Lista de números>, <Lista de frecuencias> ]
stdevp=dsvstm